{
    "0": {
        "\ufeff\"burpVersion\"": "2022.2.4",
        "exportTime": "Fri Apr 01 15:58:40 ICT 2022",
        "issue__serialNumber": "5.42369E+18",
        "issue__type": "4194592",
        "issue__name": "User agent-dependent response",
        "issue__host__ip": "10.150.1.11",
        "issue__host__#Text": "https://10.150.1.11:30003",
        "issue__path": "/robots.txt",
        "issue__location": "/robots.txt",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Application responses may depend systematically on the value of the User-Agent header in requests. This behavior does not itself constitute a security vulnerability, but may point towards additional attack surface within the application, which may contain vulnerabilities.</p>\\n<p>This behavior often arises because applications provide different user interfaces for desktop and mobile users. Mobile interfaces have often been less thoroughly tested for vulnerabilities such as cross-site scripting, and often have simpler authentication and session handling mechanisms that may contain problems that are not present in the full interface.</p>\\n<p>To review the interface provided by the alternate User-Agent header, you can configure a match/replace rule in Burp Proxy to modify the User-Agent header in all requests, and then browse the application in the normal way using your normal browser. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n</ul>",
        "issue__issueDetail": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "1": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "7.70904E+18",
        "issue__type": "3146240",
        "issue__name": "External service interaction (DNS)",
        "issue__host__ip": "10.150.1.11",
        "issue__host__#Text": "http://10.150.1.11:30003",
        "issue__path": "/robots.txt",
        "issue__location": "/robots.txt",
        "issue__severity": "High",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>External service interaction arises when it is possible to induce an application to interact with an arbitrary external service, such as a web or mail server. The ability to trigger arbitrary external service interactions does not constitute a vulnerability in its own right, and in some cases might even be the intended behavior of the application.\\nHowever, in many cases, it can indicate a vulnerability with serious consequences.</p>\\n<p>In cases where DNS-based interactions can be triggered, it is normally possible to trigger interactions using other service types, and these are reported as separate issues. \\n  If a payload that specifies a particular service type (e.g. a URL) triggers only a DNS-based interaction, \\n  then this strongly indicates that the application attempted to connect using that other service, \\n  but was prevented from doing so by egress filters in place at the network layer. The ability to send requests to other systems can allow the vulnerable server to be used as an attack proxy.\\n  By submitting suitable payloads, an attacker can cause the application server to attack other systems that it can interact with. \\n  This may include public third-party systems, internal systems within the same organization, or services available on the local loopback adapter of the application server itself. \\n  Depending on the network architecture, this may expose highly vulnerable internal services that are not otherwise accessible to external attackers. </p>",
        "issue__remediationBackground": "<p>You should review the purpose and intended use of the relevant application functionality, \\n  and determine whether the ability to trigger arbitrary external service interactions is intended behavior. \\n  If so, you should be aware of the types of attacks that can be performed via this behavior and take appropriate measures. \\n  These measures might include blocking network access from the application server to other internal systems, and hardening the application server itself to remove any services available on the local loopback adapter.</p>\\n<p>If the ability to trigger arbitrary external service interactions is not intended behavior, then you should implement a whitelist of permitted services and hosts, and block any interactions that do not appear on this whitelist.</p>\\n\\n<p>Out-of-Band Application Security Testing (OAST) is highly effective at uncovering high-risk features, to the point where finding the root cause of an interaction can be quite challenging. To find the source of an external service interaction, try to identify whether it is triggered by specific application functionality, or occurs indiscriminately on all requests. If it occurs on all endpoints, a front-end CDN or application firewall may be responsible, or a back-end analytics system parsing server logs. In some cases, interactions may originate from third-party systems; for example, a HTTP request may trigger a poisoned email which passes through a link-scanner on its way to the recipient.</p>",
        "issue__references": "<ul>\\n  <li><a href=\"https://portswigger.net/blog/introducing-burp-collaborator\">Burp Collaborator</a></li>\\n <li><a href=\"https://portswigger.net/burp/application-security-testing/oast\">Out-of-band application security testing (OAST)</a></li>\\n  <li><a href=\"https://portswigger.net/research/cracking-the-lens-targeting-https-hidden-attack-surface\">PortSwigger Research: Cracking the Lens</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/918.html\">CWE-918: Server-Side Request Forgery (SSRF)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/406.html\">CWE-406: Insufficient Control of Network Message Volume (Network Amplification)</a></li>\\n</ul>",
        "issue__issueDetail": "It is possible to induce the application to perform server-side DNS lookups of arbitrary domain names.<br><br>The payload <b>211l88sbw89o23u2bc3yoau27tdm1gpajy9lz9o.burpcollaborator.net</b> was submitted in the HTTP Host header.<br><br>The application performed a DNS lookup of the specified domain.",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "DNS",
        "issue__collaboratorEvent__originIp": "54.179.114.1",
        "issue__collaboratorEvent__time": "2022-Apr-01 04:24:41 UTC",
        "issue__collaboratorEvent__lookupType": "A",
        "issue__collaboratorEvent__lookupHost": "211l88sbw89o23u2bc3yoau27tdm1gpajy9lz9o.burpcollaborator.net"
    },
    "2": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "1.89851E+18",
        "issue__type": "4194592",
        "issue__name": "User agent-dependent response",
        "issue__host__ip": "10.150.1.11",
        "issue__host__#Text": "http://10.150.1.11:30003",
        "issue__path": "/robots.txt",
        "issue__location": "/robots.txt",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Application responses may depend systematically on the value of the User-Agent header in requests. This behavior does not itself constitute a security vulnerability, but may point towards additional attack surface within the application, which may contain vulnerabilities.</p>\\n<p>This behavior often arises because applications provide different user interfaces for desktop and mobile users. Mobile interfaces have often been less thoroughly tested for vulnerabilities such as cross-site scripting, and often have simpler authentication and session handling mechanisms that may contain problems that are not present in the full interface.</p>\\n<p>To review the interface provided by the alternate User-Agent header, you can configure a match/replace rule in Burp Proxy to modify the User-Agent header in all requests, and then browse the application in the normal way using your normal browser. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n</ul>",
        "issue__issueDetail": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "3": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "5.01073E+18",
        "issue__type": "3146240",
        "issue__name": "External service interaction (DNS)",
        "issue__host__ip": "10.150.1.11",
        "issue__host__#Text": "http://10.150.1.11:30003",
        "issue__path": "/",
        "issue__location": "/",
        "issue__severity": "High",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>External service interaction arises when it is possible to induce an application to interact with an arbitrary external service, such as a web or mail server. The ability to trigger arbitrary external service interactions does not constitute a vulnerability in its own right, and in some cases might even be the intended behavior of the application.\\nHowever, in many cases, it can indicate a vulnerability with serious consequences.</p>\\n<p>In cases where DNS-based interactions can be triggered, it is normally possible to trigger interactions using other service types, and these are reported as separate issues. \\n  If a payload that specifies a particular service type (e.g. a URL) triggers only a DNS-based interaction, \\n  then this strongly indicates that the application attempted to connect using that other service, \\n  but was prevented from doing so by egress filters in place at the network layer. The ability to send requests to other systems can allow the vulnerable server to be used as an attack proxy.\\n  By submitting suitable payloads, an attacker can cause the application server to attack other systems that it can interact with. \\n  This may include public third-party systems, internal systems within the same organization, or services available on the local loopback adapter of the application server itself. \\n  Depending on the network architecture, this may expose highly vulnerable internal services that are not otherwise accessible to external attackers. </p>",
        "issue__remediationBackground": "<p>You should review the purpose and intended use of the relevant application functionality, \\n  and determine whether the ability to trigger arbitrary external service interactions is intended behavior. \\n  If so, you should be aware of the types of attacks that can be performed via this behavior and take appropriate measures. \\n  These measures might include blocking network access from the application server to other internal systems, and hardening the application server itself to remove any services available on the local loopback adapter.</p>\\n<p>If the ability to trigger arbitrary external service interactions is not intended behavior, then you should implement a whitelist of permitted services and hosts, and block any interactions that do not appear on this whitelist.</p>\\n\\n<p>Out-of-Band Application Security Testing (OAST) is highly effective at uncovering high-risk features, to the point where finding the root cause of an interaction can be quite challenging. To find the source of an external service interaction, try to identify whether it is triggered by specific application functionality, or occurs indiscriminately on all requests. If it occurs on all endpoints, a front-end CDN or application firewall may be responsible, or a back-end analytics system parsing server logs. In some cases, interactions may originate from third-party systems; for example, a HTTP request may trigger a poisoned email which passes through a link-scanner on its way to the recipient.</p>",
        "issue__references": "<ul>\\n  <li><a href=\"https://portswigger.net/blog/introducing-burp-collaborator\">Burp Collaborator</a></li>\\n <li><a href=\"https://portswigger.net/burp/application-security-testing/oast\">Out-of-band application security testing (OAST)</a></li>\\n  <li><a href=\"https://portswigger.net/research/cracking-the-lens-targeting-https-hidden-attack-surface\">PortSwigger Research: Cracking the Lens</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/918.html\">CWE-918: Server-Side Request Forgery (SSRF)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/406.html\">CWE-406: Insufficient Control of Network Message Volume (Network Amplification)</a></li>\\n</ul>",
        "issue__issueDetail": "It is possible to induce the application to perform server-side DNS lookups of arbitrary domain names.<br><br>The payload <b>huf01nlqpn23vinh4rwdhpnh0861uwiqce21sph.burpcollaborator.net</b> was submitted in the HTTP Host header.<br><br>The application performed a DNS lookup of the specified domain.",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "DNS",
        "issue__collaboratorEvent__originIp": "54.179.114.1",
        "issue__collaboratorEvent__time": "2022-Apr-01 04:24:23 UTC",
        "issue__collaboratorEvent__lookupType": "A",
        "issue__collaboratorEvent__lookupHost": "huf01nlqpn23vinh4rwdhpnh0861uwiqce21sph.burpcollaborator.net"
    },
    "4": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "7.94792E+18",
        "issue__type": "3146240",
        "issue__name": "External service interaction (DNS)",
        "issue__host__ip": "10.150.1.11",
        "issue__host__#Text": "http://10.150.1.11:30003",
        "issue__path": "/",
        "issue__location": "/",
        "issue__severity": "High",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>External service interaction arises when it is possible to induce an application to interact with an arbitrary external service, such as a web or mail server. The ability to trigger arbitrary external service interactions does not constitute a vulnerability in its own right, and in some cases might even be the intended behavior of the application.\\nHowever, in many cases, it can indicate a vulnerability with serious consequences.</p>\\n<p>In cases where DNS-based interactions can be triggered, it is normally possible to trigger interactions using other service types, and these are reported as separate issues. \\n  If a payload that specifies a particular service type (e.g. a URL) triggers only a DNS-based interaction, \\n  then this strongly indicates that the application attempted to connect using that other service, \\n  but was prevented from doing so by egress filters in place at the network layer. The ability to send requests to other systems can allow the vulnerable server to be used as an attack proxy.\\n  By submitting suitable payloads, an attacker can cause the application server to attack other systems that it can interact with. \\n  This may include public third-party systems, internal systems within the same organization, or services available on the local loopback adapter of the application server itself. \\n  Depending on the network architecture, this may expose highly vulnerable internal services that are not otherwise accessible to external attackers. </p>",
        "issue__remediationBackground": "<p>You should review the purpose and intended use of the relevant application functionality, \\n  and determine whether the ability to trigger arbitrary external service interactions is intended behavior. \\n  If so, you should be aware of the types of attacks that can be performed via this behavior and take appropriate measures. \\n  These measures might include blocking network access from the application server to other internal systems, and hardening the application server itself to remove any services available on the local loopback adapter.</p>\\n<p>If the ability to trigger arbitrary external service interactions is not intended behavior, then you should implement a whitelist of permitted services and hosts, and block any interactions that do not appear on this whitelist.</p>\\n\\n<p>Out-of-Band Application Security Testing (OAST) is highly effective at uncovering high-risk features, to the point where finding the root cause of an interaction can be quite challenging. To find the source of an external service interaction, try to identify whether it is triggered by specific application functionality, or occurs indiscriminately on all requests. If it occurs on all endpoints, a front-end CDN or application firewall may be responsible, or a back-end analytics system parsing server logs. In some cases, interactions may originate from third-party systems; for example, a HTTP request may trigger a poisoned email which passes through a link-scanner on its way to the recipient.</p>",
        "issue__references": "<ul>\\n  <li><a href=\"https://portswigger.net/blog/introducing-burp-collaborator\">Burp Collaborator</a></li>\\n <li><a href=\"https://portswigger.net/burp/application-security-testing/oast\">Out-of-band application security testing (OAST)</a></li>\\n  <li><a href=\"https://portswigger.net/research/cracking-the-lens-targeting-https-hidden-attack-surface\">PortSwigger Research: Cracking the Lens</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/918.html\">CWE-918: Server-Side Request Forgery (SSRF)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/406.html\">CWE-406: Insufficient Control of Network Message Volume (Network Amplification)</a></li>\\n</ul>",
        "issue__issueDetail": "It is possible to induce the application to perform server-side DNS lookups of arbitrary domain names.<br><br>The payload <b>http://cxdv4iolsi5yydqc7mz8kkqc339wxrljp7fu5iu.burpcollaborator.net/</b> was submitted in the HTTP Request-Line.<br><br>The application performed a DNS lookup of the specified domain.",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "DNS",
        "issue__collaboratorEvent__originIp": "54.179.114.1",
        "issue__collaboratorEvent__time": "2022-Apr-01 04:24:22 UTC",
        "issue__collaboratorEvent__lookupType": "A",
        "issue__collaboratorEvent__lookupHost": "cxdv4iolsi5yydqc7mz8kkqc339wxrljp7fu5iu.burpcollaborator.net"
    },
    "5": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "2.33155E+18",
        "issue__type": "5247488",
        "issue__name": "DOM data manipulation (DOM-based)",
        "issue__host__ip": "10.150.1.11",
        "issue__host__#Text": "https://10.150.1.11:30003",
        "issue__path": "/",
        "issue__location": "/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>\\n<p>DOM data manipulation arises when a script writes controllable data to a field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions. </p>\\n\\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>",
        "issue__remediationBackground": "<p>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.</p>",
        "issue__references": "<ul>\\n    <li><a href=\"https://portswigger.net/web-security/dom-based/dom-data-manipulation\">Web Security Academy: DOM data manipulation</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/153.html\">CAPEC-153: Input Data Manipulation</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>location.href</b> and passed to <b>history.pushState</b>.",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "location.href",
        "issue__dynamicAnalysis__sink": "history.pushState",
        "issue__dynamicAnalysis__sourceStackTrace": "at Object._0x33d7c2 [as proxiedGetterCallback] (<anonymous>:1:588475)\\nat Object.get href [as href] (<anonymous>:1:298487)\\nat Fe (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:23894)\\nat Ie (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:23971)\\nat t.ensureURL (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:23471)\\nat https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:20087\\nat https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:16536\\nat https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:17082",
        "issue__dynamicAnalysis__sinkStackTrace": "at Object.mbeLh (<anonymous>:1:178892)\\nat Object.fnjVf (<anonymous>:1:572108)\\nat Object.avWyP (<anonymous>:1:578438)\\nat History.pushState (<anonymous>:1:579005)\\nat ge (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:15927)\\nat Ie (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:23968)\\nat t.ensureURL (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:23471)\\nat https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:20087\\nat https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:16536\\nat https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:17082",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "?ruxss5tqfd=ruxss5tqfd%27%22`'\"/ruxss5tqfd/><ruxss5tqfd/\\>jz55wr2thb&",
        "issue__dynamicAnalysis__sinkValue": "?ruxss5tqfd=ruxss5tqfd%27%22`'\"/ruxss5tqfd/><ruxss5tqfd/\\>jz55wr2thb&#/",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "FALSE",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "6": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "1.85269E+18",
        "issue__type": "5247488",
        "issue__name": "DOM data manipulation (DOM-based)",
        "issue__host__ip": "10.150.1.11",
        "issue__host__#Text": "https://10.150.1.11:30003",
        "issue__path": "/",
        "issue__location": "/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>\\n<p>DOM data manipulation arises when a script writes controllable data to a field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions. </p>\\n\\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>",
        "issue__remediationBackground": "<p>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.</p>",
        "issue__references": "<ul>\\n    <li><a href=\"https://portswigger.net/web-security/dom-based/dom-data-manipulation\">Web Security Academy: DOM data manipulation</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/153.html\">CAPEC-153: Input Data Manipulation</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>location.href</b> and passed to <b>history.replaceState</b>.",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "location.href",
        "issue__dynamicAnalysis__sink": "history.replaceState",
        "issue__dynamicAnalysis__sourceStackTrace": "at Object._0x33d7c2 [as proxiedGetterCallback] (<anonymous>:1:588475)\\nat Object.get href [as href] (<anonymous>:1:298487)\\nat se (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:14266)\\nat t.setupListeners (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:22819)\\nat r (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:25950)\\nat https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:18886\\nat l (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:19187)\\nat https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:20101\\nat https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:16536\\nat https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:17082",
        "issue__dynamicAnalysis__sinkStackTrace": "at Object.LufnJ (<anonymous>:1:572448)\\nat History.replaceState (<anonymous>:1:580746)\\nat se (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:14347)\\nat t.setupListeners (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:22819)\\nat r (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:25950)\\nat https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:18886\\nat l (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:19187)\\nat https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:20101\\nat https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:16536\\nat https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:17082",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "?qtjkglstgk=qtjkglstgk%27%22`'\"/qtjkglstgk/><qtjkglstgk/\\>vnnkgbbnoq&",
        "issue__dynamicAnalysis__sinkValue": "?qtjkglstgk=qtjkglstgk%27%22`'\"/qtjkglstgk/><qtjkglstgk/\\>vnnkgbbnoq&",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "FALSE",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "7": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "2.22796E+17",
        "issue__type": "5247488",
        "issue__name": "DOM data manipulation (DOM-based)",
        "issue__host__ip": "10.150.1.11",
        "issue__host__#Text": "https://10.150.1.11:30003",
        "issue__path": "/",
        "issue__location": "/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>\\n<p>DOM data manipulation arises when a script writes controllable data to a field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions. </p>\\n\\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>",
        "issue__remediationBackground": "<p>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.</p>",
        "issue__references": "<ul>\\n    <li><a href=\"https://portswigger.net/web-security/dom-based/dom-data-manipulation\">Web Security Academy: DOM data manipulation</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/153.html\">CAPEC-153: Input Data Manipulation</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>location.href</b> and passed to <b>history.replaceState</b>.",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "location.href",
        "issue__dynamicAnalysis__sink": "history.replaceState",
        "issue__dynamicAnalysis__sourceStackTrace": "at Object._0x33d7c2 [as proxiedGetterCallback] (<anonymous>:1:588475)\\nat Object.get href [as href] (<anonymous>:1:298487)\\nat Fe (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:23894)\\nat Re (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:24022)\\nat Ae (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:23598)\\nat new t (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:22568)\\nat new Ne (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:25262)\\nat Object.YaEn (https://10.150.1.11:30003/static/js/app.a3fe4b5701c8db961a94.js:1:856667)\\nat a (https://10.150.1.11:30003/static/js/manifest.b131f1f768bbb5cd405c.js:1:411)\\nat Object.NHnr (https://10.150.1.11:30003/static/js/app.a3fe4b5701c8db961a94.js:1:840812)\\nat a (https://10.150.1.11:30003/static/js/manifest.b131f1f768bbb5cd405c.js:1:411)\\nat Object.0 (https://10.150.1.11:30003/static/js/app.a3fe4b5701c8db961a94.js:1:986)\\nat a (https://10.150.1.11:30003/static/js/manifest.b131f1f768bbb5cd405c.js:1:411)\\nat window.webpackJsonp (https://10.150.1.11:30003/static/js/manifest.b131f1f768bbb5cd405c.js:1:284)\\nat https://10.150.1.11:30003/static/js/app.a3fe4b5701c8db961a94.js:1:1",
        "issue__dynamicAnalysis__sinkStackTrace": "at Object.LufnJ (<anonymous>:1:572448)\\nat History.replaceState (<anonymous>:1:580746)\\nat ge (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:15899)\\nat _e (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:16024)\\nat Re (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:24019)\\nat Ae (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:23598)\\nat new t (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:22568)\\nat new Ne (https://10.150.1.11:30003/static/js/vendor.f731fb2f9c52ed7eb60e.js:22:25262)\\nat Object.YaEn (https://10.150.1.11:30003/static/js/app.a3fe4b5701c8db961a94.js:1:856667)\\nat a (https://10.150.1.11:30003/static/js/manifest.b131f1f768bbb5cd405c.js:1:411)\\nat Object.NHnr (https://10.150.1.11:30003/static/js/app.a3fe4b5701c8db961a94.js:1:840812)\\nat a (https://10.150.1.11:30003/static/js/manifest.b131f1f768bbb5cd405c.js:1:411)\\nat Object.0 (https://10.150.1.11:30003/static/js/app.a3fe4b5701c8db961a94.js:1:986)\\nat a (https://10.150.1.11:30003/static/js/manifest.b131f1f768bbb5cd405c.js:1:411)\\nat window.webpackJsonp (https://10.150.1.11:30003/static/js/manifest.b131f1f768bbb5cd405c.js:1:284)\\nat https://10.150.1.11:30003/static/js/app.a3fe4b5701c8db961a94.js:1:1",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "?mhusr5d7hy=mhusr5d7hy%27%22`'\"/mhusr5d7hy/><mhusr5d7hy/\\>w33pppf5ks&",
        "issue__dynamicAnalysis__sinkValue": "?mhusr5d7hy=mhusr5d7hy%27%22`'\"/mhusr5d7hy/><mhusr5d7hy/\\>w33pppf5ks&#/",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "FALSE",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "8": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "7.72344E+18",
        "issue__type": "4194592",
        "issue__name": "User agent-dependent response",
        "issue__host__ip": "10.150.1.11",
        "issue__host__#Text": "http://10.150.1.11:30003",
        "issue__path": "/",
        "issue__location": "/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Application responses may depend systematically on the value of the User-Agent header in requests. This behavior does not itself constitute a security vulnerability, but may point towards additional attack surface within the application, which may contain vulnerabilities.</p>\\n<p>This behavior often arises because applications provide different user interfaces for desktop and mobile users. Mobile interfaces have often been less thoroughly tested for vulnerabilities such as cross-site scripting, and often have simpler authentication and session handling mechanisms that may contain problems that are not present in the full interface.</p>\\n<p>To review the interface provided by the alternate User-Agent header, you can configure a match/replace rule in Burp Proxy to modify the User-Agent header in all requests, and then browse the application in the normal way using your normal browser. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n</ul>",
        "issue__issueDetail": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "9": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "3.37272E+18",
        "issue__type": "8389120",
        "issue__name": "HTML does not specify charset",
        "issue__host__ip": "10.150.1.11",
        "issue__host__#Text": "https://10.150.1.11:30003",
        "issue__path": "/robots.txt",
        "issue__location": "/robots.txt",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.</p>\\n<p>In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>",
        "issue__remediationBackground": "<p>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example <b>charset=ISO-8859-1</b>.\\n</p>",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/436.html\">CWE-436: Interpretation Conflict</a></li>\\n</ul>",
        "issue__issueDetail": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "10": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "7.14349E+17",
        "issue__type": "6291968",
        "issue__name": "Email addresses disclosed",
        "issue__host__ip": "10.150.1.11",
        "issue__host__#Text": "https://10.150.1.11:30003",
        "issue__path": "/static/js/0.976bb9544bb438f05c60.js",
        "issue__location": "/static/js/0.976bb9544bb438f05c60.js",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>\\n<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>",
        "issue__remediationBackground": "<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>\\n<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>",
        "issue__references": "<ul>\\n    <li><a href=\"https://portswigger.net/web-security/information-disclosure\">Web Security Academy: Information disclosure</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/200.html\">CWE-200: Information Exposure</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/37.html\">CAPEC-37: Retrieve Embedded Sensitive Data</a></li>\\n</ul>",
        "issue__issueDetail": "The following email address was disclosed in the response:<ul><li>kenji.urushima@gmail.com</li></ul>",
        "issue__issueDetailItems__issueDetailItem": "kenji.urushima@gmail.com",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "11": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "1.97034E+18",
        "issue__type": "16777984",
        "issue__name": "Strict transport security not enforced",
        "issue__host__ip": "10.150.1.11",
        "issue__host__#Text": "https://10.150.1.11:30003",
        "issue__path": "/robots.txt",
        "issue__location": "/robots.txt",
        "issue__severity": "Low",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p> The application fails to prevent users from connecting  to it over unencrypted connections.  An attacker able to modify a legitimate user's network traffic could bypass the application's use of SSL/TLS encryption, and use the application as a platform for attacks against its users. This attack is performed by rewriting HTTPS links as HTTP, so that if a targeted user follows a link to the site from an HTTP page, their browser never attempts to use an encrypted connection. The sslstrip tool  automates this process. </p>\\n<p>\\nTo exploit this vulnerability, an attacker must be suitably positioned to intercept and modify the victim's network traffic.This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure. </p>",
        "issue__remediationBackground": "<p>The application should instruct web browsers to only access the application using HTTPS. To do this, enable HTTP Strict Transport Security (HSTS) by adding a response header with the name 'Strict-Transport-Security' and the value 'max-age=expireTime', where expireTime is the time in seconds that browsers should remember that the site should only be accessed using HTTPS. Consider adding the 'includeSubDomains' flag if appropriate.</p>\\n<p>Note that because HSTS is a &quot;trust on first use&quot; (TOFU) protocol, a user who has never accessed the application will never have seen the HSTS header, and will therefore still be vulnerable to SSL stripping attacks. To mitigate this risk, you can optionally add the 'preload' flag to the HSTS header, and submit the domain for review by browser vendors.</p>",
        "issue__references": "<ul>\\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security\">HTTP Strict Transport Security</a></li>\\n<li><a href=\"https://github.com/moxie0/sslstrip\">sslstrip</a></li>\\n<li><a href=\"https://hstspreload.appspot.com/\">HSTS Preload Form</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/523.html\">CWE-523: Unprotected Transport of Credentials</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/94.html\">CAPEC-94: Man in the Middle Attack</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/157.html\">CAPEC-157: Sniffing Attacks</a></li>\\n</ul>",
        "issue__issueDetail": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "12": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "4.9362E+18",
        "issue__type": "8389120",
        "issue__name": "HTML does not specify charset",
        "issue__host__ip": "10.150.1.11",
        "issue__host__#Text": "http://10.150.1.11:30003",
        "issue__path": "/",
        "issue__location": "/",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.</p>\\n<p>In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>",
        "issue__remediationBackground": "<p>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example <b>charset=ISO-8859-1</b>.\\n</p>",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/436.html\">CWE-436: Interpretation Conflict</a></li>\\n</ul>",
        "issue__issueDetail": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "13": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "3.96685E+18",
        "issue__type": "5243008",
        "issue__name": "Vulnerable JavaScript dependency",
        "issue__host__ip": "10.150.1.11",
        "issue__host__#Text": "https://10.150.1.11:30003",
        "issue__path": "/static/js/0.976bb9544bb438f05c60.js",
        "issue__location": "/static/js/0.976bb9544bb438f05c60.js",
        "issue__severity": "Low",
        "issue__confidence": "Tentative",
        "issue__issueBackground": "<p>\\nThe use of third-party JavaScript libraries can introduce a range of DOM-based vulnerabilities, including some that can be used to hijack user accounts like DOM-XSS. \\n</p>\\n\\n<p>\\nCommon JavaScript libraries typically enjoy the benefit of being heavily audited. This may mean that bugs are quickly identified and patched upstream, resulting in a steady stream of security updates that need to be applied. Although it may be tempting to ignore updates, using a library with missing security patches can make your website exceptionally easy to exploit. Therefore, it's important to ensure that any available security updates are applied promptly. \\n</p>\\n<p>\\nSome library vulnerabilities expose every application that imports the library, but others only affect applications that use certain library features. Accurately identifying which library vulnerabilities apply to your website can be difficult, so we recommend applying all available security updates regardless.\\n</p>",
        "issue__remediationBackground": "<p>Develop a patch-management strategy to ensure that security updates are promptly applied to all third-party libraries in your application. Also, consider reducing your attack surface by removing any libraries that are no longer in use.</p>",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/1104.html\">CWE-1104: Use of Unmaintained Third Party Components</a></li>\\n<li><a href=\"https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities\">A9: Using Components with Known Vulnerabilities</a></li>\\n</ul>",
        "issue__issueDetail": "<p>We observed a vulnerable JavaScript library.</p>\\n<p>We detected <strong>YUI</strong> version <strong>2.9.0</strong>, which has the following vulnerabilities:</p>\\n<ul>\\n<li>\\n<a href=\"https://nvd.nist.gov/vuln/detail/CVE-2012-5883\">CVE-2012-5883</a></li>\\n<li>\\n<a href=\"https://nvd.nist.gov/vuln/detail/CVE-2012-5882\">CVE-2012-5882</a></li>\\n<li>\\n<a href=\"https://nvd.nist.gov/vuln/detail/CVE-2012-5881\">CVE-2012-5881</a></li>\\n</ul><br>\\n",
        "issue__issueDetailItems__issueDetailItem": "YUI>.2.9.0",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "14": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "7.06471E+18",
        "issue__type": "8389120",
        "issue__name": "HTML does not specify charset",
        "issue__host__ip": "10.150.1.11",
        "issue__host__#Text": "http://10.150.1.11:30003",
        "issue__path": "/robots.txt",
        "issue__location": "/robots.txt",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.</p>\\n<p>In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>",
        "issue__remediationBackground": "<p>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example <b>charset=ISO-8859-1</b>.\\n</p>",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/436.html\">CWE-436: Interpretation Conflict</a></li>\\n</ul>",
        "issue__issueDetail": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "15": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "8.94578E+18",
        "issue__type": "16777472",
        "issue__name": "TLS certificate",
        "issue__host__ip": "10.150.1.11",
        "issue__host__#Text": "https://10.150.1.11:30003",
        "issue__path": "/",
        "issue__location": "/",
        "issue__severity": "Medium",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>TLS (or SSL) helps to protect the confidentiality and integrity of information in transit between the browser and server, and to provide authentication of the server's identity. To serve this purpose, the server must present an TLS certificate that is valid for the server's hostname, is issued by a trusted authority and is valid for the current date. If any one of these requirements is not met, TLS connections to the server will not provide the full protection for which TLS is designed.</p>\\n<p>It should be noted that various attacks exist against TLS in general, and in the context of HTTPS web connections in particular. It may be possible for a determined and suitably-positioned attacker to compromise TLS connections without user detection even when a valid TLS certificate is used. </p>",
        "issue__remediationBackground": "",
        "issue__references": "<ul><li><a href=\"https://wiki.mozilla.org/Security/Server_Side_TLS\">SSL/TLS Configuration Guide</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/295.html\">CWE-295: Improper Certificate Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/326.html\">CWE-326: Inadequate Encryption Strength</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/327.html\">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a></li>\\n</ul>",
        "issue__issueDetail": "The following problems were identified with the server's TLS certificate:<ul><li>The server's certificate is not valid for the server's hostname.</li><li>The server's certificate is not trusted.</li></ul><b>Note:</b> Burp relies on the Java trust store to determine whether certificates are trusted. The Java trust store does not include every root CA certificate that is included within browser trust stores. Burp might incorrectly report that a certificate is not trusted, if a valid root CA certificate is being used that is not included in the Java trust store.<br><br>The server presented the following certificate:<br><br><table><tr><td><b>Issued to:</b>&nbsp;&nbsp;</td><td>tapbackktc.ktc.co.th</td></tr><tr><td><b>Issued by:</b>&nbsp;&nbsp;</td><td>KTCCAPRD3</td></tr><tr><td><b>Valid from:</b>&nbsp;&nbsp;</td><td>Mon Jun 08 10:38:35 ICT 2020</td></tr><tr><td><b>Valid to:</b>&nbsp;&nbsp;</td><td>Fri Feb 18 16:53:18 ICT 2039</td></tr></table>",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "16": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "2.06742E+18",
        "issue__type": "16777728",
        "issue__name": "Unencrypted communications",
        "issue__host__ip": "10.150.1.11",
        "issue__host__#Text": "http://10.150.1.11:30003",
        "issue__path": "/",
        "issue__location": "/",
        "issue__severity": "Low",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>The application allows users to connect to it over unencrypted connections.  An attacker suitably positioned to view a legitimate user's network traffic could record and monitor their interactions with the application and obtain any information the user supplies. Furthermore, an attacker able to modify traffic could use the application as a platform for attacks against its users and third-party websites. Unencrypted connections have been exploited by ISPs and governments to track users, and to inject adverts and malicious JavaScript. Due to these concerns, web browser vendors are planning to visually flag unencrypted connections as hazardous.</p>\\n<p>\\nTo exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.\\n</p>\\n<p>Please note that using a mixture of encrypted and unencrypted communications is an ineffective defense against active attackers, because they can easily remove references to encrypted resources when these references are transmitted over an unencrypted connection.</p>",
        "issue__remediationBackground": "<p>Applications should use transport-level encryption (SSL/TLS) to protect all communications passing between the client and the server. The Strict-Transport-Security HTTP header should be used to ensure that clients refuse to access the server over an insecure connection.</p>",
        "issue__references": "<ul>\\n<li><a href=\"https://www.chromium.org/Home/chromium-security/marking-http-as-non-secure\">Marking HTTP as non-secure</a></li>\\n<li><a href=\"https://wiki.mozilla.org/Security/Server_Side_TLS\">Configuring Server-Side SSL/TLS</a></li>\\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security\">HTTP Strict Transport Security</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/326.html\">CWE-326: Inadequate Encryption Strength</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/94.html\">CAPEC-94: Man in the Middle Attack</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/157.html\">CAPEC-157: Sniffing Attacks</a></li>\\n</ul>",
        "issue__issueDetail": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "17": {
        "\ufeff\"burpVersion\"": "2022.2.4",
        "exportTime": "Fri Apr 01 16:14:53 ICT 2022",
        "issue__serialNumber": "5.35102E+18",
        "issue__type": "2098688",
        "issue__name": "Cross-origin resource sharing",
        "issue__host__ip": "34.96.83.158",
        "issue__host__#Text": "https://34.96.83.158",
        "issue__path": "/robots.txt",
        "issue__location": "/robots.txt",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user.</p>\\n<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.</p>",
        "issue__remediationBackground": "<p>Any inappropriate domains should be removed from the CORS policy.</p>",
        "issue__references": "<ul>\\n  <li><a href=\"https://portswigger.net/web-security/cors\">Web Security Academy: Cross-origin resource sharing (CORS)</a></li>\\n  <li> <a href=\"https://portswigger.net/research/exploiting-cors-misconfigurations-for-bitcoins-and-bounties\">Exploiting CORS Misconfigurations</a> </li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\\n</ul>",
        "issue__issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.<br><br>The response uses a wildcard in the Access-Control-Allow-Origin header and also specifies that credentials are allowed. Note that browsers do not allow this combination, and the Access-Control-Allow-Credentials header will be ignored.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "18": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "7.24607E+18",
        "issue__type": "2098689",
        "issue__name": "Cross-origin resource sharing: arbitrary origin trusted",
        "issue__host__ip": "34.96.83.158",
        "issue__host__#Text": "https://34.96.83.158",
        "issue__path": "/robots.txt",
        "issue__location": "/robots.txt",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>\\nTrusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.</p>\\n<p>If the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.</p>",
        "issue__remediationBackground": "<p>Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.</p>",
        "issue__references": "<ul>\\n  <li><a href=\"https://portswigger.net/web-security/cors\">Web Security Academy: Cross-origin resource sharing (CORS)</a></li>\\n  <li> <a href=\"https://portswigger.net/research/exploiting-cors-misconfigurations-for-bitcoins-and-bounties\">Exploiting CORS Misconfigurations</a> </li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\\n</ul>",
        "issue__issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.<br><br>The application allowed access from the requested origin <strong>https://prjbmdzrnzxg.com</strong><br><br>The response uses a wildcard in the Access-Control-Allow-Origin header and also specifies that credentials are allowed. Note that browsers do not allow this combination, and the Access-Control-Allow-Credentials header will be ignored.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "19": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "4.2397E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "34.96.83.158",
        "issue__host__#Text": "http://34.96.83.158",
        "issue__path": "/robots.txt",
        "issue__location": "/robots.txt [URL path filename]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the URL path filename is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "20": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "2.18925E+17",
        "issue__type": "2098688",
        "issue__name": "Cross-origin resource sharing",
        "issue__host__ip": "34.96.83.158",
        "issue__host__#Text": "https://34.96.83.158",
        "issue__path": "/",
        "issue__location": "/",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user.</p>\\n<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.</p>",
        "issue__remediationBackground": "<p>Any inappropriate domains should be removed from the CORS policy.</p>",
        "issue__references": "<ul>\\n  <li><a href=\"https://portswigger.net/web-security/cors\">Web Security Academy: Cross-origin resource sharing (CORS)</a></li>\\n  <li> <a href=\"https://portswigger.net/research/exploiting-cors-misconfigurations-for-bitcoins-and-bounties\">Exploiting CORS Misconfigurations</a> </li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\\n</ul>",
        "issue__issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.<br><br>The response uses a wildcard in the Access-Control-Allow-Origin header and also specifies that credentials are allowed. Note that browsers do not allow this combination, and the Access-Control-Allow-Credentials header will be ignored.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "21": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "4.71037E+18",
        "issue__type": "2098689",
        "issue__name": "Cross-origin resource sharing: arbitrary origin trusted",
        "issue__host__ip": "34.96.83.158",
        "issue__host__#Text": "https://34.96.83.158",
        "issue__path": "/",
        "issue__location": "/",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>\\nTrusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.</p>\\n<p>If the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.</p>",
        "issue__remediationBackground": "<p>Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.</p>",
        "issue__references": "<ul>\\n  <li><a href=\"https://portswigger.net/web-security/cors\">Web Security Academy: Cross-origin resource sharing (CORS)</a></li>\\n  <li> <a href=\"https://portswigger.net/research/exploiting-cors-misconfigurations-for-bitcoins-and-bounties\">Exploiting CORS Misconfigurations</a> </li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\\n</ul>",
        "issue__issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.<br><br>The application allowed access from the requested origin <strong>https://hepzajpzpwvv.com</strong><br><br>The response uses a wildcard in the Access-Control-Allow-Origin header and also specifies that credentials are allowed. Note that browsers do not allow this combination, and the Access-Control-Allow-Credentials header will be ignored.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "22": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "1.95414E+18",
        "issue__type": "16777472",
        "issue__name": "TLS certificate",
        "issue__host__ip": "34.96.83.158",
        "issue__host__#Text": "https://34.96.83.158",
        "issue__path": "/",
        "issue__location": "/",
        "issue__severity": "Medium",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>TLS (or SSL) helps to protect the confidentiality and integrity of information in transit between the browser and server, and to provide authentication of the server's identity. To serve this purpose, the server must present an TLS certificate that is valid for the server's hostname, is issued by a trusted authority and is valid for the current date. If any one of these requirements is not met, TLS connections to the server will not provide the full protection for which TLS is designed.</p>\\n<p>It should be noted that various attacks exist against TLS in general, and in the context of HTTPS web connections in particular. It may be possible for a determined and suitably-positioned attacker to compromise TLS connections without user detection even when a valid TLS certificate is used. </p>",
        "issue__remediationBackground": "",
        "issue__references": "<ul><li><a href=\"https://wiki.mozilla.org/Security/Server_Side_TLS\">SSL/TLS Configuration Guide</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/295.html\">CWE-295: Improper Certificate Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/326.html\">CWE-326: Inadequate Encryption Strength</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/327.html\">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a></li>\\n</ul>",
        "issue__issueDetail": "The following problems were identified with the server's TLS certificate:<ul><li>The server's certificate is not valid for the server's hostname.</li><li>The server's certificate is not trusted.</li></ul><b>Note:</b> Burp relies on the Java trust store to determine whether certificates are trusted. The Java trust store does not include every root CA certificate that is included within browser trust stores. Burp might incorrectly report that a certificate is not trusted, if a valid root CA certificate is being used that is not included in the Java trust store.<br><br>The server presented the following certificate:<br><br><table><tr><td><b>Issued to:</b>&nbsp;&nbsp;</td><td>*.ktcgroup.dev</td></tr><tr><td><b>Issued by:</b>&nbsp;&nbsp;</td><td>R3</td></tr><tr><td><b>Valid from:</b>&nbsp;&nbsp;</td><td>Mon Feb 14 12:21:53 ICT 2022</td></tr><tr><td><b>Valid to:</b>&nbsp;&nbsp;</td><td>Sun May 15 12:21:52 ICT 2022</td></tr></table>",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "23": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "2.85328E+18",
        "issue__type": "16777728",
        "issue__name": "Unencrypted communications",
        "issue__host__ip": "34.96.83.158",
        "issue__host__#Text": "http://34.96.83.158",
        "issue__path": "/",
        "issue__location": "/",
        "issue__severity": "Low",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>The application allows users to connect to it over unencrypted connections.  An attacker suitably positioned to view a legitimate user's network traffic could record and monitor their interactions with the application and obtain any information the user supplies. Furthermore, an attacker able to modify traffic could use the application as a platform for attacks against its users and third-party websites. Unencrypted connections have been exploited by ISPs and governments to track users, and to inject adverts and malicious JavaScript. Due to these concerns, web browser vendors are planning to visually flag unencrypted connections as hazardous.</p>\\n<p>\\nTo exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.\\n</p>\\n<p>Please note that using a mixture of encrypted and unencrypted communications is an ineffective defense against active attackers, because they can easily remove references to encrypted resources when these references are transmitted over an unencrypted connection.</p>",
        "issue__remediationBackground": "<p>Applications should use transport-level encryption (SSL/TLS) to protect all communications passing between the client and the server. The Strict-Transport-Security HTTP header should be used to ensure that clients refuse to access the server over an insecure connection.</p>",
        "issue__references": "<ul>\\n<li><a href=\"https://www.chromium.org/Home/chromium-security/marking-http-as-non-secure\">Marking HTTP as non-secure</a></li>\\n<li><a href=\"https://wiki.mozilla.org/Security/Server_Side_TLS\">Configuring Server-Side SSL/TLS</a></li>\\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security\">HTTP Strict Transport Security</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/326.html\">CWE-326: Inadequate Encryption Strength</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/94.html\">CAPEC-94: Man in the Middle Attack</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/157.html\">CAPEC-157: Sniffing Attacks</a></li>\\n</ul>",
        "issue__issueDetail": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "24": {
        "\ufeff\"burpVersion\"": "2022.2.4",
        "exportTime": "Fri Apr 01 16:16:34 ICT 2022",
        "issue__serialNumber": "2.84094E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "34.96.83.158",
        "issue__host__#Text": "http://uatloan.ktcgroup.dev",
        "issue__path": "/robots.txt",
        "issue__location": "/robots.txt [URL path filename]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the URL path filename is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "25": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "5.82204E+17",
        "issue__type": "2098688",
        "issue__name": "Cross-origin resource sharing",
        "issue__host__ip": "34.96.83.158",
        "issue__host__#Text": "https://uatloan.ktcgroup.dev",
        "issue__path": "/robots.txt",
        "issue__location": "/robots.txt",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user.</p>\\n<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.</p>",
        "issue__remediationBackground": "<p>Any inappropriate domains should be removed from the CORS policy.</p>",
        "issue__references": "<ul>\\n  <li><a href=\"https://portswigger.net/web-security/cors\">Web Security Academy: Cross-origin resource sharing (CORS)</a></li>\\n  <li> <a href=\"https://portswigger.net/research/exploiting-cors-misconfigurations-for-bitcoins-and-bounties\">Exploiting CORS Misconfigurations</a> </li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\\n</ul>",
        "issue__issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.<br><br>The response uses a wildcard in the Access-Control-Allow-Origin header and also specifies that credentials are allowed. Note that browsers do not allow this combination, and the Access-Control-Allow-Credentials header will be ignored.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "26": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "5.14356E+18",
        "issue__type": "2098689",
        "issue__name": "Cross-origin resource sharing: arbitrary origin trusted",
        "issue__host__ip": "34.96.83.158",
        "issue__host__#Text": "https://uatloan.ktcgroup.dev",
        "issue__path": "/robots.txt",
        "issue__location": "/robots.txt",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>\\nTrusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.</p>\\n<p>If the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.</p>",
        "issue__remediationBackground": "<p>Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.</p>",
        "issue__references": "<ul>\\n  <li><a href=\"https://portswigger.net/web-security/cors\">Web Security Academy: Cross-origin resource sharing (CORS)</a></li>\\n  <li> <a href=\"https://portswigger.net/research/exploiting-cors-misconfigurations-for-bitcoins-and-bounties\">Exploiting CORS Misconfigurations</a> </li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\\n</ul>",
        "issue__issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.<br><br>The application allowed access from the requested origin <strong>https://gifnjxpjwamf.com</strong><br><br>The response uses a wildcard in the Access-Control-Allow-Origin header and also specifies that credentials are allowed. Note that browsers do not allow this combination, and the Access-Control-Allow-Credentials header will be ignored.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "27": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "7.90855E+17",
        "issue__type": "2098688",
        "issue__name": "Cross-origin resource sharing",
        "issue__host__ip": "34.96.83.158",
        "issue__host__#Text": "https://uatloan.ktcgroup.dev",
        "issue__path": "/",
        "issue__location": "/",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user.</p>\\n<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.</p>",
        "issue__remediationBackground": "<p>Any inappropriate domains should be removed from the CORS policy.</p>",
        "issue__references": "<ul>\\n  <li><a href=\"https://portswigger.net/web-security/cors\">Web Security Academy: Cross-origin resource sharing (CORS)</a></li>\\n  <li> <a href=\"https://portswigger.net/research/exploiting-cors-misconfigurations-for-bitcoins-and-bounties\">Exploiting CORS Misconfigurations</a> </li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\\n</ul>",
        "issue__issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.<br><br>The response uses a wildcard in the Access-Control-Allow-Origin header and also specifies that credentials are allowed. Note that browsers do not allow this combination, and the Access-Control-Allow-Credentials header will be ignored.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "28": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "6.42655E+18",
        "issue__type": "2098689",
        "issue__name": "Cross-origin resource sharing: arbitrary origin trusted",
        "issue__host__ip": "34.96.83.158",
        "issue__host__#Text": "https://uatloan.ktcgroup.dev",
        "issue__path": "/",
        "issue__location": "/",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>\\nTrusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.</p>\\n<p>If the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.</p>",
        "issue__remediationBackground": "<p>Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.</p>",
        "issue__references": "<ul>\\n  <li><a href=\"https://portswigger.net/web-security/cors\">Web Security Academy: Cross-origin resource sharing (CORS)</a></li>\\n  <li> <a href=\"https://portswigger.net/research/exploiting-cors-misconfigurations-for-bitcoins-and-bounties\">Exploiting CORS Misconfigurations</a> </li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\\n</ul>",
        "issue__issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.<br><br>The application allowed access from the requested origin <strong>https://kgnbldpgeymq.com</strong><br><br>The response uses a wildcard in the Access-Control-Allow-Origin header and also specifies that credentials are allowed. Note that browsers do not allow this combination, and the Access-Control-Allow-Credentials header will be ignored.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "29": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "5.01535E+18",
        "issue__type": "16777472",
        "issue__name": "TLS certificate",
        "issue__host__ip": "34.96.83.158",
        "issue__host__#Text": "https://uatloan.ktcgroup.dev",
        "issue__path": "/",
        "issue__location": "/",
        "issue__severity": "Medium",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>TLS (or SSL) helps to protect the confidentiality and integrity of information in transit between the browser and server, and to provide authentication of the server's identity. To serve this purpose, the server must present an TLS certificate that is valid for the server's hostname, is issued by a trusted authority and is valid for the current date. If any one of these requirements is not met, TLS connections to the server will not provide the full protection for which TLS is designed.</p>\\n<p>It should be noted that various attacks exist against TLS in general, and in the context of HTTPS web connections in particular. It may be possible for a determined and suitably-positioned attacker to compromise TLS connections without user detection even when a valid TLS certificate is used. </p>",
        "issue__remediationBackground": "",
        "issue__references": "<ul><li><a href=\"https://wiki.mozilla.org/Security/Server_Side_TLS\">SSL/TLS Configuration Guide</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/295.html\">CWE-295: Improper Certificate Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/326.html\">CWE-326: Inadequate Encryption Strength</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/327.html\">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a></li>\\n</ul>",
        "issue__issueDetail": "The following problem was identified with the server's TLS certificate:<ul><li>The server's certificate is not trusted.</li></ul><b>Note:</b> Burp relies on the Java trust store to determine whether certificates are trusted. The Java trust store does not include every root CA certificate that is included within browser trust stores. Burp might incorrectly report that a certificate is not trusted, if a valid root CA certificate is being used that is not included in the Java trust store.<br><br>The server presented the following certificate:<br><br><table><tr><td><b>Issued to:</b>&nbsp;&nbsp;</td><td>*.ktcgroup.dev</td></tr><tr><td><b>Issued by:</b>&nbsp;&nbsp;</td><td>R3</td></tr><tr><td><b>Valid from:</b>&nbsp;&nbsp;</td><td>Mon Feb 14 12:21:53 ICT 2022</td></tr><tr><td><b>Valid to:</b>&nbsp;&nbsp;</td><td>Sun May 15 12:21:52 ICT 2022</td></tr></table>",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "30": {
        "\ufeff\"burpVersion\"": "",
        "exportTime": "",
        "issue__serialNumber": "2.76597E+18",
        "issue__type": "16777728",
        "issue__name": "Unencrypted communications",
        "issue__host__ip": "34.96.83.158",
        "issue__host__#Text": "http://uatloan.ktcgroup.dev",
        "issue__path": "/",
        "issue__location": "/",
        "issue__severity": "Low",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>The application allows users to connect to it over unencrypted connections.  An attacker suitably positioned to view a legitimate user's network traffic could record and monitor their interactions with the application and obtain any information the user supplies. Furthermore, an attacker able to modify traffic could use the application as a platform for attacks against its users and third-party websites. Unencrypted connections have been exploited by ISPs and governments to track users, and to inject adverts and malicious JavaScript. Due to these concerns, web browser vendors are planning to visually flag unencrypted connections as hazardous.</p>\\n<p>\\nTo exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.\\n</p>\\n<p>Please note that using a mixture of encrypted and unencrypted communications is an ineffective defense against active attackers, because they can easily remove references to encrypted resources when these references are transmitted over an unencrypted connection.</p>",
        "issue__remediationBackground": "<p>Applications should use transport-level encryption (SSL/TLS) to protect all communications passing between the client and the server. The Strict-Transport-Security HTTP header should be used to ensure that clients refuse to access the server over an insecure connection.</p>",
        "issue__references": "<ul>\\n<li><a href=\"https://www.chromium.org/Home/chromium-security/marking-http-as-non-secure\">Marking HTTP as non-secure</a></li>\\n<li><a href=\"https://wiki.mozilla.org/Security/Server_Side_TLS\">Configuring Server-Side SSL/TLS</a></li>\\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security\">HTTP Strict Transport Security</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/326.html\">CWE-326: Inadequate Encryption Strength</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/94.html\">CAPEC-94: Man in the Middle Attack</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/157.html\">CAPEC-157: Sniffing Attacks</a></li>\\n</ul>",
        "issue__issueDetail": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    }
}